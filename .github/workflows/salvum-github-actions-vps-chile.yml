# .github/workflows/salvum-github-actions-vps-chile.yml
name: üá®üá± Salvum con VPS Chile (Rackeo)

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Solo test de conexi√≥n y login'
        required: false
        default: 'true'
        type: boolean
      agente_especifico:
        description: 'Procesar solo un agente espec√≠fico'
        required: false
        type: string

  schedule:
    - cron: '0 15 * * 1-5'  # 3pm UTC = 12pm Chile, lunes a viernes

jobs:
  salvum-con-vps-chile:
    runs-on: ubuntu-latest
    
    env:
      SALVUM_USER: ${{ secrets.SALVUM_USER }}
      SALVUM_PASS: ${{ secrets.SALVUM_PASS }}
      GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
      # Credenciales VPS Chile (agregar en GitHub Secrets)
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_PORT: ${{ secrets.VPS_PORT }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      TEST_MODE: ${{ github.event.inputs.test_mode }}
      AGENTE_ESPECIFICO: ${{ github.event.inputs.agente_especifico }}
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: üîß Instalar Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version
    
    - name: üì¶ Instalar dependencias Python y SSH
      run: |
        pip install --upgrade pip
        pip install selenium webdriver-manager pandas gspread google-auth google-auth-oauthlib google-auth-httplib2 requests
        sudo apt-get install -y sshpass openssh-client
    
    - name: üåê Verificar IP original
      run: |
        echo "üåê IP ORIGINAL (GitHub Actions):"
        curl -s ipinfo.io | jq '.' || curl -s ipinfo.io
    
    - name: üîë Configurar SSH para VPS Chile
      run: |
        echo "üîß Configurando conexi√≥n SSH al VPS chileno..."
        
        # Crear directorio SSH
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Desactivar verificaci√≥n de host (para automaci√≥n)
        echo "Host *" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
        chmod 600 ~/.ssh/config
        
        # Test de conexi√≥n SSH
        echo "üß™ Probando conexi√≥n SSH..."
        sshpass -p "$VPS_PASSWORD" ssh -p "$VPS_PORT" "$VPS_USER@$VPS_HOST" \
          -o ConnectTimeout=10 \
          "echo '‚úÖ Conexi√≥n SSH exitosa! IP del VPS:'; curl -s ipinfo.io/ip"
    
    - name: üá®üá± Crear t√∫nel SOCKS a VPS Chile
      run: |
        echo "üîó Creando t√∫nel SOCKS al VPS chileno..."
        
        # Crear t√∫nel SOCKS en background
        sshpass -p "$VPS_PASSWORD" ssh -p "$VPS_PORT" \
          -D 8080 -N -f \
          -o ExitOnForwardFailure=yes \
          -o ServerAliveInterval=60 \
          -o ServerAliveCountMax=3 \
          "$VPS_USER@$VPS_HOST"
        
        echo "‚úÖ T√∫nel SOCKS creado en puerto 8080"
        
        # Verificar que el t√∫nel est√© activo
        sleep 5
        if pgrep -f "ssh.*-D 8080" > /dev/null; then
          echo "‚úÖ T√∫nel SSH est√° ejecut√°ndose"
          ps aux | grep "ssh.*-D 8080" | grep -v grep
        else
          echo "‚ùå Error: T√∫nel SSH no est√° ejecut√°ndose"
          exit 1
        fi
    
    - name: üß™ Verificar IP Chilena via SOCKS
      run: |
        echo "üß™ Verificando IP a trav√©s del t√∫nel SOCKS..."
        
        # Verificar IP usando el proxy SOCKS
        NEW_IP=$(curl -s --max-time 15 \
          --socks5-hostname localhost:8080 \
          ipinfo.io/json || echo '{"error": "timeout"}')
        
        echo "üìç Nueva IP info (via VPS Chile):"
        echo "$NEW_IP" | jq '.' || echo "$NEW_IP"
        
        # Verificar pa√≠s
        COUNTRY=$(echo "$NEW_IP" | jq -r '.country // "UNKNOWN"')
        CITY=$(echo "$NEW_IP" | jq -r '.city // "UNKNOWN"')
        IP=$(echo "$NEW_IP" | jq -r '.ip // "UNKNOWN"')
        
        echo "üè¢ Pa√≠s detectado: $COUNTRY"
        echo "üèôÔ∏è Ciudad: $CITY"
        echo "üì° IP: $IP"
        
        # Verificar que es la IP de nuestro VPS
        if [ "$IP" = "$VPS_HOST" ]; then
          echo "‚úÖ ¬°PERFECTO! Usando IP del VPS chileno ($IP)"
        else
          echo "‚ö†Ô∏è Advertencia: IP diferente a la esperada (esperada: $VPS_HOST, obtenida: $IP)"
        fi
        
        if [ "$COUNTRY" = "CL" ]; then
          echo "üá®üá± ¬°√âXITO! IP chilena confirmada"
        else
          echo "‚ùå Error: IP no es chilena (Pa√≠s: $COUNTRY)"
          exit 1
        fi
    
    - name: üîì Test acceso Salvum via VPS (HTTP + Navegador)
      run: |
        echo "üîç TEST 1: Probando acceso HTTP con headers realistas..."
        
        # Test con curl + headers de navegador real
        SALVUM_RESPONSE=$(curl -s -I --max-time 20 \
          --socks5-hostname localhost:8080 \
          -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" \
          -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
          -H "Accept-Language: es-CL,es;q=0.9,en;q=0.8" \
          -H "Accept-Encoding: gzip, deflate, br" \
          -H "DNT: 1" \
          -H "Connection: keep-alive" \
          -H "Upgrade-Insecure-Requests: 1" \
          https://prescriptores.salvum.cl/login || echo "ERROR: timeout")
        
        echo "üìä Respuesta Salvum (con headers realistas):"
        echo "$SALVUM_RESPONSE"
        
        echo ""
        echo "ü§ñ TEST 2: Probando con navegador Selenium..."
        
        python -c "
        import time
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.chrome.service import Service
        from webdriver_manager.chrome import ChromeDriverManager
        
        print('üîß Configurando Chrome con proxy...')
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox') 
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--proxy-server=socks5://localhost:8080')
        options.add_argument('--host-resolver-rules=MAP * ~NOTFOUND , EXCLUDE localhost')
        options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        
        try:
            print('üîó Accediendo a Salvum con navegador...')
            driver.get('https://prescriptores.salvum.cl/login')
            time.sleep(8)
            
            url = driver.current_url
            title = driver.title
            status = 'SUCCESS' if 'salvum' in title.lower() or 'login' in driver.page_source.lower() else 'BLOCKED'
            
            print(f'üìç URL: {url}')
            print(f'üìÑ T√≠tulo: {title}')
            print(f'üìä Estado: {status}')
            
            driver.save_screenshot('test_salvum_navegador.png')
            
            if status == 'SUCCESS':
                print('‚úÖ ¬°√âXITO! Salvum accesible con navegador + VPS')
                exit(0)
            else:
                print('‚ùå A√∫n bloqueado incluso con navegador')
                if 'bbva' in title.lower():
                    print('üè¶ Redirigido a BBVA - bloqueo confirmado')
                exit(1)
                
        except Exception as e:
            print(f'‚ùå Error: {e}')
            exit(1)
        finally:
            driver.quit()
        "
    
    - name: ü§ñ Ejecutar automatizaci√≥n Salvum
      if: ${{ github.event.inputs.test_mode != 'true' }}
      run: |
        echo "üöÄ Ejecutando automatizaci√≥n completa de Salvum..."
        echo "üß™ Modo test: ${{ github.event.inputs.test_mode }}"
        echo "üë§ Agente espec√≠fico: ${{ github.event.inputs.agente_especifico }}"
        
        # Configurar proxy para Python/Selenium
        export HTTP_PROXY=socks5://localhost:8080
        export HTTPS_PROXY=socks5://localhost:8080
        
        # Ejecutar automatizaci√≥n
        python salvum_automation_vps.py
      timeout-minutes: 90
    
    - name: üß™ Solo test de login (modo test)
      if: ${{ github.event.inputs.test_mode == 'true' }}
      run: |
        echo "üß™ Ejecutando test optimizado con VPS Chile..."
        
        python -c "
        import os
        import sys
        import time
        import random
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.common.by import By
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.common.keys import Keys
        from webdriver_manager.chrome import ChromeDriverManager
        
        print('üîß Configurando navegador optimizado con proxy SOCKS...')
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-gpu')
        options.add_argument('--window-size=1920,1080')
        
        # Proxy SOCKS
        options.add_argument('--proxy-server=socks5://localhost:8080')
        options.add_argument('--host-resolver-rules=MAP * ~NOTFOUND , EXCLUDE localhost')
        
        # Anti-detecci√≥n avanzada
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--disable-extensions')
        options.add_argument('--disable-plugins')
        options.add_argument('--disable-images')  # M√°s r√°pido
        options.add_experimental_option('excludeSwitches', ['enable-automation'])
        options.add_experimental_option('useAutomationExtension', False)
        
        # User agent chileno realista
        options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        
        try:
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=options)
            
            # Script anti-detecci√≥n
            driver.execute_script('Object.defineProperty(navigator, \"webdriver\", {get: () => undefined})')
            
            print('üîç Verificando IP del navegador...')
            driver.get('https://ipinfo.io/json')
            time.sleep(2)
            ip_info = driver.find_element(By.TAG_NAME, 'pre').text
            print(f'üìç IP del navegador: {ip_info}')
            
            # Espera aleatoria para simular comportamiento humano
            wait_time = random.uniform(3, 7)
            print(f'‚è≥ Esperando {wait_time:.1f}s (comportamiento humano)...')
            time.sleep(wait_time)
            
            print('üîó Accediendo a Salvum (intento optimizado)...')
            driver.get('https://prescriptores.salvum.cl/login')
            
            # Esperar carga completa
            time.sleep(8)
            
            titulo = driver.title
            url = driver.current_url
            page_source = driver.page_source
            
            print(f'üìÑ T√≠tulo: {titulo}')
            print(f'üìç URL: {url}')
            print(f'üìä Tama√±o HTML: {len(page_source)} bytes')
            
            # An√°lisis detallado
            if 'bbva' in titulo.lower():
                print('‚ùå REDIRIGIDO A BBVA - Detecci√≥n de datacenter/bot')
                resultado = 'BBVA_REDIRECT'
            elif 'salvum' in page_source.lower() or 'ob forum' in titulo.lower():
                print('‚úÖ ¬°ACCESO EXITOSO A SALVUM!')
                resultado = 'SUCCESS'
                
                # Buscar campos de login
                campos_texto = driver.find_elements(By.CSS_SELECTOR, 'input[type=\"text\"], input[type=\"email\"], input[name*=\"usuario\"], input[id*=\"usuario\"]')
                campos_password = driver.find_elements(By.CSS_SELECTOR, 'input[type=\"password\"]')
                
                print(f'üîç Campos texto encontrados: {len(campos_texto)}')
                print(f'üîç Campos password encontrados: {len(campos_password)}')
                
                if len(campos_texto) >= 1 and len(campos_password) >= 1:
                    print('‚úÖ FORMULARIO DE LOGIN COMPLETO ENCONTRADO')
                    resultado = 'FULL_SUCCESS'
                    
                    # Probar login si tenemos credenciales
                    usuario = os.getenv('SALVUM_USER')
                    password = os.getenv('SALVUM_PASS')
                    
                    if usuario and password:
                        print('üîê Probando login real...')
                        try:
                            campos_texto[0].clear()
                            time.sleep(1)
                            campos_texto[0].send_keys(usuario)
                            time.sleep(1)
                            campos_password[0].clear()
                            time.sleep(1)
                            campos_password[0].send_keys(password)
                            time.sleep(1)
                            campos_password[0].send_keys(Keys.RETURN)
                            
                            # Esperar respuesta
                            time.sleep(10)
                            
                            new_url = driver.current_url
                            new_title = driver.title
                            
                            print(f'üìç URL post-login: {new_url}')
                            print(f'üìÑ T√≠tulo post-login: {new_title}')
                            
                            if new_url != url or 'dashboard' in new_url.lower():
                                print('üéâ ¬°LOGIN EXITOSO!')
                                resultado = 'LOGIN_SUCCESS'
                                driver.save_screenshot('salvum_login_exitoso.png')
                            else:
                                print('‚ö†Ô∏è Login sin cambio de URL')
                                driver.save_screenshot('salvum_login_sin_cambio.png')
                                
                        except Exception as e:
                            print(f'‚ö†Ô∏è Error en login: {e}')
                    else:
                        print('‚ÑπÔ∏è Sin credenciales para test de login')
                else:
                    print('‚ö†Ô∏è Formulario incompleto')
            else:
                print('‚ùì Contenido desconocido')
                resultado = 'UNKNOWN'
            
            # Guardar evidencia
            driver.save_screenshot('test_salvum_optimizado.png')
            with open('salvum_optimizado.html', 'w', encoding='utf-8') as f:
                f.write(page_source)
            
            print(f'üìä RESULTADO FINAL: {resultado}')
            
            if resultado in ['SUCCESS', 'FULL_SUCCESS', 'LOGIN_SUCCESS']:
                print('üéâ ¬°√âXITO! VPS + Navegador optimizado funciona')
                exit(0)
            else:
                print('‚ùå A√∫n hay problemas que resolver')
                exit(1)
            
        except Exception as e:
            print(f'‚ùå Error en test: {e}')
            if 'driver' in locals():
                driver.save_screenshot('error_salvum_optimizado.png')
                with open('error_optimizado.html', 'w', encoding='utf-8') as f:
                    f.write(driver.page_source)
            sys.exit(1)
        finally:
            if 'driver' in locals():
                driver.quit()
        "
    
    - name: üîå Cerrar t√∫nel SSH
      if: always()
      run: |
        echo "üîå Cerrando t√∫nel SSH..."
        
        # Matar procesos SSH del t√∫nel
        pkill -f "ssh.*-D 8080" || echo "T√∫nel SSH ya estaba cerrado"
        
        # Verificar desconexi√≥n
        sleep 3
        FINAL_IP=$(curl -s --max-time 10 ipinfo.io/json || echo '{"error": "timeout"}')
        echo "üìç IP final (sin t√∫nel):"
        echo "$FINAL_IP" | jq '.' || echo "$FINAL_IP"
    
    - name: üìä Subir resultados
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: salvum-vps-chile-results-${{ github.run_number }}
        path: |
          *.png
          *.json
          *.html
        retention-days: 7
    
    - name: üìã Resumen final
      if: always()
      run: |
        echo "üìã RESUMEN EJECUCI√ìN CON VPS CHILE"
        echo "=================================="
        echo "üïê Timestamp: $(date)"
        echo "üñ•Ô∏è VPS Host: $VPS_HOST"
        echo "üîå VPS Port: $VPS_PORT"
        echo "üë§ VPS User: $VPS_USER"
        echo "üß™ Modo test: ${{ github.event.inputs.test_mode }}"
        echo "üë§ Agente espec√≠fico: ${{ github.event.inputs.agente_especifico }}"
        echo ""
        echo "üìÅ Archivos generados:"
        ls -la *.png *.json *.html 2>/dev/null || echo "No se generaron archivos"
        echo ""
        echo "üí° VENTAJAS DE TU VPS CHILE:"
        echo "   ‚úÖ IP 100% chilena garantizada (45.7.230.109)"
        echo "   ‚úÖ Servidor dedicado propio"
        echo "   ‚úÖ Sin l√≠mites de uso"
        echo "   ‚úÖ Mayor velocidad que VPN shared"
        echo "   ‚úÖ M√°s confiable y estable"
        echo "   ‚úÖ Sin restricciones de proveedores VPN"
        echo "=================================="
