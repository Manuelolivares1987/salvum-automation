# .github/workflows/diagnostico-salvum.yml
name: 🔍 Diagnóstico Salvum

on:
  workflow_dispatch:
    inputs:
      test_profundo:
        description: 'Ejecutar test profundo con múltiples intentos'
        required: false
        default: false
        type: boolean

jobs:
  diagnostico-salvum:
    runs-on: ubuntu-latest
    
    env:
      SALVUM_USER: ${{ secrets.SALVUM_USER }}
      SALVUM_PASS: ${{ secrets.SALVUM_PASS }}
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: 🔧 Instalar Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version
    
    - name: 📦 Instalar dependencias Python
      run: |
        pip install --upgrade pip
        pip install selenium webdriver-manager requests
    
    - name: 🔍 Ejecutar diagnóstico completo
      run: |
        echo "🔍 Iniciando diagnóstico completo de Salvum..."
        python test_salvum_diagnostico.py
        echo "📊 Diagnóstico completado"
      continue-on-error: true
    
    - name: 📊 Mostrar resultados principales
      run: |
        echo "📋 RESULTADOS DEL DIAGNÓSTICO"
        echo "=============================="
        
        if [ -f "diagnostico_completo.json" ]; then
          echo "✅ Archivo de diagnóstico generado"
          
          # Mostrar IP info
          echo ""
          echo "🌐 INFORMACIÓN DE RED:"
          python -c "
        import json
        try:
            with open('diagnostico_completo.json', 'r') as f:
                data = json.load(f)
            
            ip_info = data.get('tests', {}).get('ip_info', {})
            print(f'   📍 IP: {ip_info.get(\"ip\", \"N/A\")}')
            print(f'   🏙️ Ciudad: {ip_info.get(\"city\", \"N/A\")}')
            print(f'   🏢 País: {ip_info.get(\"country\", \"N/A\")}')
            print(f'   🏢 ISP: {ip_info.get(\"org\", \"N/A\")}')
            
            problema = data.get('problema_principal', 'DESCONOCIDO')
            print(f'\n🚨 PROBLEMA PRINCIPAL: {problema}')
            
            recomendaciones = data.get('recomendaciones', [])
            if recomendaciones:
                print('\n💡 RECOMENDACIONES:')
                for rec in recomendaciones:
                    print(f'   - {rec}')
                    
        except Exception as e:
            print(f'Error leyendo diagnóstico: {e}')
          "
        else
          echo "❌ No se generó archivo de diagnóstico"
        fi
        
        echo ""
        echo "=============================="
    
    - name: 📊 Subir resultados de diagnóstico
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: diagnostico-salvum-${{ github.run_number }}
        path: |
          diagnostico_completo.json
          diagnostico_selenium.png
          diagnostico_page.html
          *.log
        retention-days: 7
    
    - name: 🎯 Determinar siguiente paso
      run: |
        echo "🎯 DETERMINANDO SIGUIENTE PASO"
        echo "=============================="
        
        if [ -f "diagnostico_completo.json" ]; then
          python -c "
        import json
        import sys
        
        try:
            with open('diagnostico_completo.json', 'r') as f:
                data = json.load(f)
            
            problema = data.get('problema_principal', 'DESCONOCIDO')
            ip_info = data.get('tests', {}).get('ip_info', {})
            pais = ip_info.get('country', 'UNKNOWN')
            
            print(f'Problema detectado: {problema}')
            print(f'País de acceso: {pais}')
            
            if problema == 'BLOQUEO_GEOGRAFICO' or pais != 'CL':
                print('')
                print('🚨 ACCIÓN REQUERIDA: BLOQUEO GEOGRÁFICO')
                print('=====================================')
                print('Salvum está bloqueando el acceso desde GitHub Actions (IP extranjera)')
                print('')
                print('SOLUCIONES POSIBLES:')
                print('1. 🌐 Implementar proxy chileno en el workflow')
                print('2. ☁️  Usar self-hosted runner en Chile') 
                print('3. 📧 Contactar Salvum para whitelist de GitHub Actions')
                print('4. 🏠 Ejecutar automatización desde servidor local chileno')
                print('')
                print('SIGUIENTE PASO: Implementar solución de proxy o servidor chileno')
                
                sys.exit(1)  # Exit code 1 para bloqueo geográfico
                
            elif problema == 'PROCESO_LOGIN':
                print('')
                print('✅ ACCESO BÁSICO OK - PROBLEMA EN LOGIN')
                print('=====================================')
                print('GitHub Actions puede acceder a Salvum, pero falla el login')
                print('')
                print('VERIFICACIONES NECESARIAS:')
                print('1. 🔐 Credenciales correctas y actualizadas')
                print('2. 🔄 Cambios en la interfaz de login de Salvum')
                print('3. 🤖 Detección de automatización más estricta')
                print('')
                print('SIGUIENTE PASO: Ajustar proceso de login')
                
                sys.exit(2)  # Exit code 2 para problema de login
                
            else:
                print('')
                print('❓ DIAGNÓSTICO REQUIERE ANÁLISIS MANUAL')
                print('====================================')
                print('Revisar archivos de diagnóstico para más detalles')
                
                sys.exit(0)  # Exit code 0 para análisis manual
                
        except Exception as e:
            print(f'Error en análisis: {e}')
            sys.exit(3)
          "
        else
          echo "❌ No se puede determinar siguiente paso sin archivo de diagnóstico"
          exit 3
        fi
