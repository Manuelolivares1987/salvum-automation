#!/usr/bin/env python3
"""
AUTOMATIZACI√ìN SALVUM - VERSI√ìN ULTRA-CORREGIDA
Chrome sin proxy garantizado + Limpieza de entorno + Correcciones integradas
"""
import os
import time
import json
import logging
import gspread
import subprocess
import socket
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
from google.oauth2.service_account import Credentials

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üá®üá± CONFIGURACI√ìN VPS CHILE
SOCKS_PROXY = "socks5://localhost:8080"
VPS_IP_ESPERADA = "45.7.230.109"

# üéØ ESTADOS V√ÅLIDOS PARA PROCESAR
ESTADOS_VALIDOS_PROCESAR = [
    'NUEVO', 'PROCESAR', 'PENDIENTE', 'LISTO', 
    'READY', 'AUTOMATIZAR', 'SI', 'YES', 'PROCESO'
]

class SalvumMultiplePlanillasConVPS:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.gc = None
        self.agentes_config = []
        self.clientes_procesados = []
        self.clientes_fallidos = []
        
    def verificar_conexion_vps(self):
        """Verificar que estamos conectados correctamente al VPS Chile"""
        logger.info("üîç VERIFICANDO CONEXI√ìN AL VPS CHILE")
        logger.info("-" * 50)
        
        try:
            import requests
            
            proxies = {
                'http': SOCKS_PROXY,
                'https': SOCKS_PROXY
            }
            
            response = requests.get('https://ipinfo.io/json', 
                                  proxies=proxies, 
                                  timeout=15)
            ip_data = response.json()
            
            ip_actual = ip_data.get('ip')
            pais = ip_data.get('country')
            ciudad = ip_data.get('city')
            
            logger.info(f"üìç IP actual: {ip_actual}")
            logger.info(f"üè¢ Pa√≠s: {pais}")
            logger.info(f"üèôÔ∏è Ciudad: {ciudad}")
            
            if ip_actual == VPS_IP_ESPERADA:
                logger.info(f"‚úÖ PERFECTO: Usando VPS chileno ({VPS_IP_ESPERADA})")
            else:
                logger.warning(f"‚ö†Ô∏è IP diferente a la esperada. Esperada: {VPS_IP_ESPERADA}, Actual: {ip_actual}")
            
            if pais == 'CL':
                logger.info("üá®üá± ‚úÖ CONFIRMADO: Conexi√≥n desde Chile")
                return True, ip_data
            else:
                logger.error(f"‚ùå ERROR: No estamos en Chile. Pa√≠s detectado: {pais}")
                return False, ip_data
                
        except Exception as e:
            logger.error(f"‚ùå Error verificando conexi√≥n VPS: {e}")
            return False, {'error': str(e)}

    def verificar_tunel_socks(self):
        """Verificar t√∫nel SOCKS (solo para verificaciones HTTP)"""
        logger.info("üîç Verificando t√∫nel SOCKS...")
        
        try:
            result = subprocess.run(['pgrep', '-f', 'ssh.*-D.*8080'], 
                                  capture_output=True, text=True)
            if result.returncode != 0:
                logger.error("‚ùå Proceso SSH del t√∫nel no encontrado")
                return False
            
            logger.info(f"‚úÖ Proceso SSH encontrado: PID {result.stdout.strip()}")
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex(('localhost', 8080))
            sock.close()
            
            if result != 0:
                logger.error("‚ùå Puerto 8080 no est√° disponible")
                return False
            
            logger.info("‚úÖ Puerto 8080 escuchando")
            
            import requests
            proxies = {'http': SOCKS_PROXY, 'https': SOCKS_PROXY}
            response = requests.get('https://ipinfo.io/json', 
                                  proxies=proxies, timeout=10)
            
            if response.status_code == 200:
                ip_data = response.json()
                logger.info(f"‚úÖ T√∫nel funcional - IP: {ip_data.get('ip')}, Pa√≠s: {ip_data.get('country')}")
                return True
            else:
                logger.error("‚ùå T√∫nel no responde correctamente")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error verificando t√∫nel: {e}")
            return False
        
    def cargar_configuracion_agentes(self):
        """Cargar configuraci√≥n de m√∫ltiples agentes desde config.json"""
        logger.info("üìã Cargando configuraci√≥n de agentes...")
        
        try:
            if os.path.exists('config.json'):
                with open('config.json', 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                agentes_activos = [
                    agente for agente in config.get('agentes', []) 
                    if agente.get('activo', True)
                ]
                
                self.agentes_config = agentes_activos
                logger.info(f"‚úÖ {len(agentes_activos)} agentes configurados desde config.json")
                
                for agente in agentes_activos:
                    logger.info(f"  üë• {agente['nombre']} - Sheet: ...{agente['sheet_id'][-8:]}")
                
                return len(agentes_activos) > 0
                
            else:
                logger.info("üìã config.json no encontrado, usando configuraci√≥n b√°sica...")
                sheet_id = os.getenv('GOOGLE_SHEET_ID')
                
                if sheet_id:
                    self.agentes_config = [{
                        'nombre': 'Agente Principal',
                        'sheet_id': sheet_id,
                        'activo': True
                    }]
                    logger.info("‚úÖ 1 planilla configurada desde variable de entorno")
                    return True
                else:
                    logger.error("‚ùå No se encontr√≥ configuraci√≥n de planillas")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error cargando configuraci√≥n: {e}")
            return False
    
    def configurar_google_sheets(self):
        """Configurar conexi√≥n con Google Sheets"""
        logger.info("üìä Configurando Google Sheets...")
        
        try:
            creds_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
            if creds_json:
                creds_dict = json.loads(creds_json)
                creds = Credentials.from_service_account_info(creds_dict)
            else:
                creds = Credentials.from_service_account_file('credentials.json')
            
            scoped_creds = creds.with_scopes([
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ])
            
            self.gc = gspread.authorize(scoped_creds)
            
            logger.info("‚úÖ Google Sheets configurado")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando Google Sheets: {e}")
            return False
    
    def leer_clientes_desde_planilla(self, sheet_id, nombre_agente):
        """Leer clientes con manejo de acentos y estados flexibles"""
        logger.info(f"üìñ Leyendo clientes de {nombre_agente}...")
        
        try:
            spreadsheet = self.gc.open_by_key(sheet_id)
            
            worksheet = None
            nombres_hoja_posibles = [
                'Mis_Clientes_Financiamiento',
                'sheet1', 'Hoja1', 'Sheet1'
            ]
            
            for nombre_hoja in nombres_hoja_posibles:
                try:
                    worksheet = spreadsheet.worksheet(nombre_hoja)
                    logger.info(f"‚úÖ Hoja encontrada: '{nombre_hoja}'")
                    break
                except:
                    continue
            
            if not worksheet:
                worksheet = spreadsheet.sheet1
                logger.info("‚ö†Ô∏è Usando primera hoja disponible")
            
            records = worksheet.get_all_records()
            logger.info(f"üìä Total registros en planilla: {len(records)}")
            
            if not records:
                logger.warning(f"‚ö†Ô∏è {nombre_agente}: Planilla vac√≠a")
                return []
            
            headers_reales = list(records[0].keys())
            logger.info(f"üìã Headers encontrados: {headers_reales}")
            
            # Verificar columnas cr√≠ticas con manejo de acentos
            tiene_procesar = any('PROCESAR' in h.upper() for h in headers_reales)
            tiene_renta = any(
                ('RENTA' in h.upper() and 'LIQUIDA' in h.upper()) or
                ('RENTA' in h.upper() and 'L√çQUIDA' in h.upper())
                for h in headers_reales
            )
            tiene_nombre = any('NOMBRE' in h.upper() and 'CLIENTE' in h.upper() for h in headers_reales)
            
            if not tiene_procesar:
                logger.error(f"‚ùå {nombre_agente}: Falta columna PROCESAR")
                return []
            if not tiene_renta:
                logger.error(f"‚ùå {nombre_agente}: Falta columna RENTA LIQUIDA/L√çQUIDA")
                return []
            if not tiene_nombre:
                logger.error(f"‚ùå {nombre_agente}: Falta columna Nombre Cliente")
                return []
            
            logger.info("‚úÖ Estructura de planilla v√°lida")
            logger.info(f"üéØ Estados v√°lidos: {ESTADOS_VALIDOS_PROCESAR}")
            
            clientes_procesar = []
            
            for i, record in enumerate(records, start=2):
                # Buscar renta con diferentes variantes
                renta_liquida = (record.get('RENTA LIQUIDA', 0) or 
                               record.get('RENTA L√çQUIDA', 0) or
                               record.get('Renta Liquida', 0) or
                               record.get('Renta L√≠quida', 0))
                
                procesar = str(record.get('PROCESAR', '')).upper().strip()
                
                try:
                    if isinstance(renta_liquida, str):
                        renta_limpia = ''.join(c for c in renta_liquida if c.isdigit() or c in '.,')
                        renta_liquida = float(renta_limpia.replace(',', '.')) if renta_limpia else 0
                    else:
                        renta_liquida = float(renta_liquida) if renta_liquida else 0
                except:
                    renta_liquida = 0
                
                logger.info(f"üîç Fila {i}: PROCESAR='{procesar}', RENTA={renta_liquida}")
                
                if renta_liquida > 0 and procesar in ESTADOS_VALIDOS_PROCESAR:
                    
                    nombre_cliente = record.get('Nombre Cliente', '')
                    rut_cliente = record.get('RUT', '')
                    
                    if not nombre_cliente.strip():
                        logger.warning(f"‚ö†Ô∏è Fila {i}: Nombre cliente vac√≠o")
                        continue
                    
                    if not rut_cliente.strip():
                        logger.warning(f"‚ö†Ô∏è Fila {i}: RUT vac√≠o")
                        continue
                    
                    monto_financiar = self._limpiar_numero(record.get('Monto Financiamiento', 0))
                    
                    if monto_financiar <= 0:
                        logger.warning(f"‚ö†Ô∏è Fila {i}: Monto inv√°lido: {monto_financiar}")
                        continue
                    
                    cliente = {
                        'agente': nombre_agente,
                        'sheet_id': sheet_id,
                        'row_number': i,
                        'Nombre Cliente': nombre_cliente,
                        'RUT': rut_cliente,
                        'Email': record.get('Email', ''),
                        'Telefono': record.get('Tel√©fono', record.get('Telefono', '')),
                        'Monto Financiar Original': monto_financiar,
                        'RENTA LIQUIDA': renta_liquida,
                        'Modelo Casa': record.get('Modelo Casa', ''),
                        'Precio Casa': self._limpiar_numero(record.get('Precio Casa', 0)),
                        'Origen': record.get('Origen', ''),
                        'Estado Original': procesar
                    }
                    clientes_procesar.append(cliente)
                    
                    logger.info(f"  ‚úÖ Cliente agregado: {nombre_cliente} (RUT: {rut_cliente}) - Monto: {monto_financiar} - Estado: {procesar}")
            
            logger.info(f"‚úÖ {nombre_agente}: {len(clientes_procesar)} clientes para procesar")
            
            if clientes_procesar:
                for cliente in clientes_procesar:
                    logger.info(f"  üìã {cliente['Nombre Cliente']} (RUT: {cliente['RUT']}) - Fila: {cliente['row_number']} - Estado: {cliente['Estado Original']}")
            else:
                logger.warning(f"‚ö†Ô∏è {nombre_agente}: No se encontraron clientes v√°lidos")
                logger.info("üîç An√°lisis detallado:")
                
                estados_encontrados = {}
                filas_con_renta = 0
                
                for record in records:
                    estado = str(record.get('PROCESAR', '')).strip()
                    if estado:
                        estados_encontrados[estado] = estados_encontrados.get(estado, 0) + 1
                    
                    renta = (record.get('RENTA LIQUIDA', 0) or 
                           record.get('RENTA L√çQUIDA', 0) or
                           record.get('Renta Liquida', 0) or
                           record.get('Renta L√≠quida', 0))
                    try:
                        if isinstance(renta, str):
                            renta_limpia = ''.join(c for c in renta if c.isdigit() or c in '.,')
                            renta = float(renta_limpia.replace(',', '.')) if renta_limpia else 0
                        else:
                            renta = float(renta) if renta else 0
                        if renta > 0:
                            filas_con_renta += 1
                    except:
                        pass
                
                logger.info(f"   üìä Filas con renta > 0: {filas_con_renta}")
                logger.info(f"   üéØ Estados v√°lidos: {ESTADOS_VALIDOS_PROCESAR}")
                logger.info(f"   üìã Estados encontrados:")
                
                for estado, cantidad in estados_encontrados.items():
                    es_valido = "‚úÖ" if estado.upper() in ESTADOS_VALIDOS_PROCESAR else "‚ùå"
                    logger.info(f"     {es_valido} '{estado}': {cantidad} filas")
            
            return clientes_procesar
            
        except Exception as e:
            logger.error(f"‚ùå Error leyendo planilla de {nombre_agente}: {e}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
            return []
    
    def _limpiar_numero(self, valor):
        """Limpiar y convertir valores num√©ricos"""
        try:
            if isinstance(valor, str):
                limpio = ''.join(c for c in valor if c.isdigit())
                return int(limpio) if limpio else 0
            return int(valor) if valor else 0
        except:
            return 0
    
    def leer_todos_los_clientes(self):
        """Leer clientes de todas las planillas configuradas"""
        logger.info("üîç Buscando clientes en todas las planillas...")
        
        todos_los_clientes = []
        
        for agente in self.agentes_config:
            if not agente.get('activo', True):
                logger.info(f"‚è≠Ô∏è Saltando {agente['nombre']} (inactivo)")
                continue
            
            clientes = self.leer_clientes_desde_planilla(
                agente['sheet_id'], 
                agente['nombre']
            )
            todos_los_clientes.extend(clientes)
        
        logger.info(f"üéØ TOTAL ENCONTRADO: {len(todos_los_clientes)} clientes para procesar")
        
        if todos_los_clientes:
            logger.info("\nüìä RESUMEN POR AGENTE:")
            agentes_resumen = {}
            for cliente in todos_los_clientes:
                agente = cliente['agente']
                if agente not in agentes_resumen:
                    agentes_resumen[agente] = []
                agentes_resumen[agente].append(cliente['Nombre Cliente'])
            
            for agente, clientes in agentes_resumen.items():
                logger.info(f"  üë• {agente}: {len(clientes)} clientes")
                for cliente in clientes:
                    logger.info(f"    - {cliente}")
        
        return todos_los_clientes
    
    def actualizar_estado_cliente(self, cliente_data, estado, resultado=""):
        """Actualizar estado del cliente en su planilla espec√≠fica"""
        try:
            sheet_id = cliente_data['sheet_id']
            row_number = cliente_data['row_number']
            agente = cliente_data['agente']
            
            spreadsheet = self.gc.open_by_key(sheet_id)
            
            worksheet = None
            nombres_hoja_posibles = ['Mis_Clientes_Financiamiento', 'sheet1', 'Hoja1', 'Sheet1']
            
            for nombre_hoja in nombres_hoja_posibles:
                try:
                    worksheet = spreadsheet.worksheet(nombre_hoja)
                    break
                except:
                    continue
            
            if not worksheet:
                worksheet = spreadsheet.sheet1
            
            worksheet.update_cell(row_number, 13, estado)
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            worksheet.update_cell(row_number, 14, f"Procesado: {timestamp}")
            
            if resultado:
                worksheet.update_cell(row_number, 15, resultado)
            
            logger.info(f"‚úÖ {agente} - Estado actualizado en fila {row_number}: {estado}")
            
        except Exception as e:
            logger.error(f"‚ùå Error actualizando estado: {e}")
    
    def configurar_navegador(self):
        """üîß CONFIGURACI√ìN CHROME ULTRA-EXPL√çCITA (GARANTIZA NO-PROXY)"""
        logger.info("üîß Configurando navegador con configuraci√≥n ultra-expl√≠cita...")
        
        # Verificar t√∫nel SOCKS (solo para logging)
        if not self.verificar_tunel_socks():
            logger.warning("‚ö†Ô∏è T√∫nel SOCKS no disponible - Chrome usar√° conexi√≥n directa")
        
        # üßπ LIMPIAR VARIABLES DE ENTORNO DE PROXY
        logger.info("üßπ Limpiando variables de entorno de proxy...")
        env_backup = {}
        proxy_env_vars = [
            'HTTP_PROXY', 'HTTPS_PROXY', 'FTP_PROXY', 'SOCKS_PROXY',
            'http_proxy', 'https_proxy', 'ftp_proxy', 'socks_proxy',
            'ALL_PROXY', 'all_proxy', 'NO_PROXY', 'no_proxy'
        ]
        
        for var in proxy_env_vars:
            if var in os.environ:
                env_backup[var] = os.environ[var]
                del os.environ[var]
                logger.info(f"üßπ Variable de proxy eliminada: {var}")
        
        options = Options()
        
        # Configuraci√≥n para GitHub Actions
        if os.getenv('GITHUB_ACTIONS'):
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
        
        # Configuraci√≥n b√°sica
        options.add_argument('--disable-gpu')
        options.add_argument('--window-size=1920,1080')
        
        # üö´ CONFIGURACI√ìN ANTI-PROXY ULTRA-EXPL√çCITA
        logger.info("üö´ Aplicando configuraci√≥n anti-proxy ultra-expl√≠cita...")
        
        # M√©todo 1: Sin proxy
        options.add_argument('--no-proxy-server')
        
        # M√©todo 2: Conexi√≥n directa
        options.add_argument('--proxy-server=direct://')
        
        # M√©todo 3: Bypass todo
        options.add_argument('--proxy-bypass-list=*')
        
        # M√©todo 4: Configuraciones adicionales
        options.add_argument('--disable-proxy-cert-verification')
        options.add_argument('--ignore-certificate-errors')
        options.add_argument('--disable-background-networking')
        
        # Anti-detecci√≥n
        options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--disable-extensions')
        options.add_argument('--disable-plugins')
        options.add_argument('--disable-images')
        options.add_argument('--disable-web-security')
        options.add_argument('--disable-features=VizDisplayCompositor')
        options.add_experimental_option('excludeSwitches', ['enable-automation'])
        options.add_experimental_option('useAutomationExtension', False)
        
        # Preferencias con configuraci√≥n de proxy
        prefs = {
            "profile.default_content_setting_values": {
                "notifications": 2,
                "media_stream": 2,
            },
            "profile.default_content_settings.popups": 0,
            "profile.managed_default_content_settings.images": 2,
            "profile.proxy_mode": "direct",
            "profile.proxy": ""
        }
        options.add_experimental_option("prefs", prefs)
        
        try:
            logger.info("üöÄ Iniciando Chrome con configuraci√≥n ultra-expl√≠cita...")
            
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=options)
            
            self.driver.set_page_load_timeout(90)
            self.driver.implicitly_wait(20)
            self.wait = WebDriverWait(self.driver, 30)
            
            self.driver.execute_script("""
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                Object.defineProperty(navigator, 'languages', {get: () => ['es-CL', 'es', 'en']});
                window.chrome = {runtime: {}};
            """)
            
            logger.info("‚úÖ Chrome configurado exitosamente (conexi√≥n directa garantizada)")
            
            # Verificar que NO est√° usando proxy
            logger.info("üîç Verificando que Chrome usa conexi√≥n directa...")
            try:
                self.driver.get('https://ipinfo.io/json')
                time.sleep(3)
                ip_element = self.driver.find_element(By.TAG_NAME, 'pre')
                ip_data = json.loads(ip_element.text)
                
                logger.info(f"üìç IP Chrome: {ip_data.get('ip')}")
                logger.info(f"üè¢ Pa√≠s Chrome: {ip_data.get('country')}")
                logger.info("‚úÖ Chrome usando conexi√≥n directa (sin proxy)")
            except Exception as e:
                logger.warning(f"No se pudo verificar IP de Chrome: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando Chrome: {e}")
            return False
            
        finally:
            # Restaurar variables de entorno
            for var, value in env_backup.items():
                os.environ[var] = value
        
    def _espera_humana(self, min_seg=1, max_seg=4, motivo="acci√≥n"):
        """Espera aleatoria que simula comportamiento humano"""
        import random
        tiempo = random.uniform(min_seg, max_seg)
        logger.info(f"‚è≥ Esperando {tiempo:.1f}s ({motivo})...")
        time.sleep(tiempo)
    
    def _mover_mouse_humano(self, elemento):
        """Simular movimiento de mouse humano hacia elemento"""
        try:
            self.driver.execute_script("""
                var elemento = arguments[0];
                var rect = elemento.getBoundingClientRect();
                var event = new MouseEvent('mouseover', {
                    'view': window,
                    'bubbles': true,
                    'cancelable': true,
                    'clientX': rect.left + rect.width/2,
                    'clientY': rect.top + rect.height/2
                });
                elemento.dispatchEvent(event);
            """, elemento)
            self._espera_humana(0.5, 1.5, "movimiento mouse")
        except:
            pass
    
    def _tipear_humano(self, campo, texto):
        """Tipear texto de forma humana (con pausas aleatorias)"""
        import random
        
        try:
            campo.clear()
            self._espera_humana(0.5, 1, "despu√©s de limpiar")
            
            for char in texto:
                campo.send_keys(char)
                pausa = random.uniform(0.05, 0.15)
                time.sleep(pausa)
            
            self._espera_humana(0.5, 1.5, "despu√©s de tipear")
            
        except Exception as e:
            logger.warning(f"Fallback a tipeo normal: {e}")
            campo.clear()
            time.sleep(1)
            campo.send_keys(texto)
            time.sleep(2)
    
    def _click_humano(self, elemento):
        """Click humano con movimiento de mouse"""
        try:
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", elemento)
            self._espera_humana(0.5, 1.5, "scroll al elemento")
            
            self._mover_mouse_humano(elemento)
            
            self._espera_humana(0.3, 0.8, "antes de click")
            elemento.click()
            self._espera_humana(0.5, 1.5, "despu√©s de click")
            
        except:
            try:
                self.driver.execute_script("arguments[0].click();", elemento)
                self._espera_humana(1, 2, "click JavaScript fallback")
            except:
                elemento.click()
                time.sleep(2)
    
    def _leer_pagina_humano(self):
        """Simular que un humano est√° leyendo la p√°gina"""
        try:
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight/4);")
            self._espera_humana(1, 2, "leyendo inicio")
            
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight/2);")
            self._espera_humana(1, 3, "leyendo medio")
            
            self.driver.execute_script("window.scrollTo(0, 0);")
            self._espera_humana(0.5, 1.5, "volviendo arriba")
            
        except:
            self._espera_humana(2, 5, "leyendo p√°gina")
    
    def realizar_login(self):
        """Login h√≠brido (VPS para verificaciones + Chrome directo)"""
        logger.info("üîê Realizando login H√çBRIDO (VPS verificaciones + Chrome directo)...")
        
        max_intentos = 3
        for intento in range(1, max_intentos + 1):
            logger.info(f"üîÑ Intento de login {intento}/{max_intentos}")
            
            try:
                vps_ok, ip_data = self.verificar_conexion_vps()
                if vps_ok:
                    logger.info("‚úÖ VPS Chile disponible para verificaciones")
                else:
                    logger.warning("‚ö†Ô∏è VPS no disponible - Continuando con Chrome directo")
                
                logger.info("üîó Accediendo a Salvum con Chrome directo...")
                self.driver.get("https://prescriptores.salvum.cl/login")
                time.sleep(15)
                
                url = self.driver.current_url
                titulo = self.driver.title
                html_size = len(self.driver.page_source)
                
                logger.info(f"üìç URL: {url}")
                logger.info(f"üìÑ T√≠tulo: {titulo}")
                logger.info(f"üìä HTML size: {html_size}")
                
                screenshot_name = f'salvum_acceso_directo_intento_{intento}.png'
                self.driver.save_screenshot(screenshot_name)
                logger.info(f"üì∏ Screenshot: {screenshot_name}")
                
                page_source = self.driver.page_source.lower()
                
                if "bbva" in titulo.lower():
                    logger.error(f"‚ùå Intento {intento}: Redirigido a BBVA")
                    if intento < max_intentos:
                        time.sleep(20)
                        continue
                    return False
                    
                elif html_size < 5000:
                    logger.error(f"‚ùå Intento {intento}: P√°gina muy peque√±a")
                    if intento < max_intentos:
                        time.sleep(15)
                        continue
                    return False
                    
                elif any(palabra in page_source for palabra in ["salvum", "usuario", "login", "ob forum"]):
                    logger.info(f"‚úÖ Intento {intento}: ACCESO EXITOSO a Salvum")
                    return self._realizar_login_optimizado()
                else:
                    logger.warning(f"‚ö†Ô∏è Intento {intento}: Estado desconocido")
                    if intento < max_intentos:
                        time.sleep(10)
                        continue
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå Error en intento {intento}: {e}")
                if intento < max_intentos:
                    time.sleep(15)
                    continue
                return False
        
        logger.error("‚ùå Todos los intentos de login fallaron")
        return False
    
    def _realizar_login_optimizado(self):
        """M√©todo de login S√öPER HUMANO"""
        logger.info("üîë INICIANDO PROCESO DE LOGIN S√öPER HUMANO")
        logger.info("-" * 50)
        
        try:
            usuario = os.getenv('SALVUM_USER')
            password = os.getenv('SALVUM_PASS')
            
            logger.info(f"üë§ Usuario: {usuario}")
            logger.info("üîí Password: [PROTEGIDO]")
            
            logger.info("üëÅÔ∏è Simulando lectura humana de la p√°gina...")
            self._leer_pagina_humano()
            
            self._espera_humana(3, 7, "comportamiento humano inicial")
            
            logger.info("üîç Buscando campos de login de forma humana...")
            
            campo_usuario = None
            campo_password = None
            
            selectores_usuario = [
                "input[type='text']",
                "input[type='email']", 
                "input[name*='usuario']",
                "input[name*='email']",
                "input[name*='user']",
                "input[id*='usuario']",
                "input[id*='email']"
            ]
            
            for selector in selectores_usuario:
                try:
                    campos = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for campo in campos:
                        if campo.is_displayed() and campo.is_enabled():
                            self._mover_mouse_humano(campo)
                            self._espera_humana(0.5, 1, "inspeccionando campo")
                            
                            campo_usuario = campo
                            logger.info(f"‚úÖ Campo usuario encontrado: {selector}")
                            break
                    if campo_usuario:
                        break
                except:
                    continue
            
            try:
                campo_password = self.driver.find_element(By.CSS_SELECTOR, "input[type='password']")
                if campo_password.is_displayed() and campo_password.is_enabled():
                    self._mover_mouse_humano(campo_password)
                    self._espera_humana(0.5, 1, "inspeccionando password")
                    logger.info("‚úÖ Campo password encontrado")
                else:
                    campo_password = None
            except:
                logger.error("‚ùå No se encontr√≥ campo password")
                return False
            
            if not campo_usuario:
                logger.error("‚ùå No se encontr√≥ campo usuario")
                return False
            
            logger.info("‚úèÔ∏è Llenando campos de forma humana...")
            
            logger.info("üë§ Llenando usuario...")
            self._click_humano(campo_usuario)
            self._tipear_humano(campo_usuario, usuario)
            logger.info("‚úÖ Usuario ingresado de forma humana")
            
            self._espera_humana(1, 3, "pausa entre campos")
            
            logger.info("üîí Llenando password...")
            self._click_humano(campo_password)
            self._tipear_humano(campo_password, password)
            logger.info("‚úÖ Password ingresado de forma humana")
            
            self._espera_humana(2, 4, "verificando datos antes de enviar")
            
            self.driver.save_screenshot('salvum_antes_submit_humano.png')
            logger.info("üì∏ Screenshot antes de submit")
            
            logger.info("üîò Buscando bot√≥n de submit de forma humana...")
            
            boton_submit = None
            
            try:
                botones = self.driver.find_elements(By.CSS_SELECTOR, "button[type='submit'], input[type='submit']")
                for btn in botones:
                    if btn.is_displayed() and btn.is_enabled():
                        self._mover_mouse_humano(btn)
                        self._espera_humana(0.5, 1, "inspeccionando bot√≥n")
                        boton_submit = btn
                        logger.info("‚úÖ Bot√≥n submit encontrado por tipo")
                        break
            except:
                pass
            
            if not boton_submit:
                try:
                    boton_submit = self.driver.find_element(By.XPATH, "//button[contains(text(), 'INGRESAR') or contains(text(), 'Ingresar') or contains(text(), 'LOGIN')]")
                    if boton_submit.is_displayed() and boton_submit.is_enabled():
                        self._mover_mouse_humano(boton_submit)
                        logger.info("‚úÖ Bot√≥n submit encontrado por texto")
                    else:
                        boton_submit = None
                except:
                    pass
            
            if boton_submit:
                logger.info("üñ±Ô∏è Haciendo click en bot√≥n de forma humana...")
                self._click_humano(boton_submit)
                logger.info("üîò Click humano ejecutado")
            else:
                logger.info("‚å®Ô∏è Usando Enter como humano...")
                self._espera_humana(0.5, 1, "preparando Enter")
                campo_password.send_keys(Keys.RETURN)
                self._espera_humana(1, 2, "despu√©s de Enter")
                logger.info("‚å®Ô∏è Enter enviado")
            
            logger.info("‚è≥ Esperando respuesta del servidor de forma humana...")
            
            for i in range(3):
                self._espera_humana(3, 5, f"esperando respuesta {i+1}/3")
                
                try:
                    url_actual = self.driver.current_url
                    if "login" not in url_actual.lower():
                        logger.info(f"‚úÖ P√°gina cambi√≥ durante espera: {url_actual}")
                        break
                except:
                    pass
            
            self.driver.save_screenshot('salvum_despues_submit_humano.png')
            logger.info("üì∏ Screenshot despu√©s de submit")
            
            nueva_url = self.driver.current_url
            nuevo_titulo = self.driver.title
            
            logger.info(f"üìç Nueva URL: {nueva_url}")
            logger.info(f"üìÑ Nuevo t√≠tulo: {nuevo_titulo}")
            
            self._espera_humana(1, 2, "leyendo resultado")
            
            if nueva_url != "https://prescriptores.salvum.cl/login" and "login" not in nueva_url.lower():
                logger.info("üéâ ¬°LOGIN S√öPER HUMANO EXITOSO! - URL cambi√≥")
                
                self._leer_pagina_humano()
                
                return True
            else:
                logger.info("‚ùå Login fall√≥ - permanece en p√°gina de login")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error en proceso de login s√∫per humano: {e}")
            return False
    
    def procesar_cliente_individual(self, cliente_data):
        """Procesar un cliente individual en Salvum"""
        nombre = cliente_data['Nombre Cliente']
        agente = cliente_data['agente']
        
        logger.info(f"üë§ Procesando: {nombre} ({agente})")
        
        try:
            self.actualizar_estado_cliente(cliente_data, "PROCESANDO")
            
            logger.info("üìù Iniciando nueva solicitud...")
            nueva_solicitud_btn = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, 
                    "//button[contains(text(), 'Nueva Solicitud')] | //a[contains(text(), 'Nueva Solicitud')]"
                ))
            )
            self._click_humano(nueva_solicitud_btn)
            self._espera_humana(3, 6, "cargando nueva solicitud")
            
            logger.info("üìã Llenando datos del cliente...")
            
            campo_rut = self.wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, 
                    "input[name*='rut'], input[id*='rut'], input[placeholder*='RUT']"
                ))
            )
            self._click_humano(campo_rut)
            self._tipear_humano(campo_rut, str(cliente_data['RUT']))
            
            nombre_partes = nombre.split()
            primer_nombre = nombre_partes[0] if nombre_partes else nombre
            apellido = ' '.join(nombre_partes[1:]) if len(nombre_partes) > 1 else "Gonzalez"
            
            self._llenar_campo_si_existe("input[name*='nombre'], input[id*='nombre'], input[placeholder*='Nombre']", primer_nombre)
            self._llenar_campo_si_existe("input[name*='apellido'], input[id*='apellido']", apellido)
            self._llenar_campo_si_existe("input[type='email'], input[name*='email']", str(cliente_data['Email']))
            self._llenar_campo_si_existe("input[name*='telefono'], input[name*='phone']", str(cliente_data['Telefono']))
            self._llenar_campo_si_existe("input[type='date'], input[name*='fecha']", "25/08/1987")
            
            self._click_continuar()
            
            logger.info("üí∞ Configurando financiamiento...")
            
            self._seleccionar_producto("Casas Modulares")
            
            monto = int(cliente_data['Monto Financiar Original'])
            self._llenar_campo_si_existe("input[name*='valor'], input[id*='valor']", str(monto))
            self._llenar_campo_si_existe("input[name*='solicitar'], input[name*='monto']", str(monto))
            
            self._configurar_cuotas_y_dia()
            
            btn_simular = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Simular')]")
            self._click_humano(btn_simular)
            self._espera_humana(6, 10, "procesando simulaci√≥n")
            
            self._click_continuar()
            
            logger.info("üìã Completando informaci√≥n personal...")
            self._llenar_informacion_personal(cliente_data)
            
            logger.info("üì§ Enviando solicitud...")
            btn_enviar = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Enviar')]"))
            )
            self._click_humano(btn_enviar)
            self._espera_humana(8, 12, "enviando solicitud")
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            screenshot_path = f"cliente_{agente.replace(' ', '_')}_{nombre.replace(' ', '_')}_{timestamp}.png"
            self.driver.save_screenshot(screenshot_path)
            
            url_resultado = self.driver.current_url
            
            resultado_cliente = {
                'agente': agente,
                'cliente': nombre,
                'rut': cliente_data['RUT'],
                'monto': monto,
                'renta_liquida': cliente_data['RENTA LIQUIDA'],
                'url_resultado': url_resultado,
                'screenshot': screenshot_path,
                'timestamp': timestamp,
                'estado': 'COMPLETADO'
            }
            
            self.actualizar_estado_cliente(cliente_data, "COMPLETADO", f"Exitoso: {url_resultado}")
            
            self.clientes_procesados.append(resultado_cliente)
            logger.info(f"‚úÖ {agente} - Cliente {nombre} procesado exitosamente")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando cliente {nombre} ({agente}): {e}")
            
            error_msg = str(e)[:100]
            self.actualizar_estado_cliente(cliente_data, "ERROR", f"Error: {error_msg}")
            
            self.clientes_fallidos.append({
                'agente': agente,
                'cliente': nombre,
                'rut': cliente_data['RUT'],
                'error': error_msg,
                'timestamp': datetime.now().isoformat()
            })
            
            return False
    
    def _llenar_campo_si_existe(self, selector, valor):
        """Llenar campo si existe DE FORMA HUMANA"""
        try:
            campo = self.driver.find_element(By.CSS_SELECTOR, selector)
            if campo.is_displayed() and campo.is_enabled():
                logger.info(f"‚úèÔ∏è Llenando campo: {selector[:30]}... = {valor}")
                
                self._mover_mouse_humano(campo)
                self._click_humano(campo)
                self._tipear_humano(campo, str(valor))
                
                return True
        except:
            pass
        return False
    
    def _click_continuar(self):
        """Click en bot√≥n continuar DE FORMA HUMANA"""
        try:
            btn_continuar = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
            logger.info("üîò Haciendo click en Continuar...")
            
            self._espera_humana(1, 3, "revisando antes de continuar")
            self._click_humano(btn_continuar)
            
            self._espera_humana(3, 6, "cargando siguiente p√°gina")
            
        except Exception as e:
            logger.warning(f"Error en continuar: {e}")
            self._espera_humana(2, 4, "fallback continuar")
    
    def _seleccionar_producto(self, producto):
        """Seleccionar producto DE FORMA HUMANA"""
        try:
            logger.info(f"üè† Seleccionando producto: {producto}")
            
            campo_producto = self.driver.find_element(By.XPATH, "//select | //input[name*='producto']")
            
            self._mover_mouse_humano(campo_producto)
            self._espera_humana(0.5, 1.5, "viendo opciones de producto")
            
            if campo_producto.tag_name == 'select':
                select = Select(campo_producto)
                self._espera_humana(1, 2, "leyendo opciones")
                select.select_by_visible_text(producto)
            else:
                self._click_humano(campo_producto)
                self._tipear_humano(campo_producto, producto)
            
            self._espera_humana(1, 2, "confirmando selecci√≥n producto")
            
        except Exception as e:
            logger.warning(f"Error seleccionando producto: {e}")
    
    def _configurar_cuotas_y_dia(self):
        """Configurar cuotas y d√≠a de vencimiento DE FORMA HUMANA"""
        logger.info("‚öôÔ∏è Configurando cuotas y d√≠a...")
        
        try:
            campo_cuotas = self.driver.find_element(By.CSS_SELECTOR, "input[name*='cuota'], select[name*='cuota']")
            
            logger.info("üìä Configurando cuotas = 60")
            self._mover_mouse_humano(campo_cuotas)
            self._espera_humana(0.5, 1, "pensando en cuotas")
            
            if campo_cuotas.tag_name == 'select':
                select = Select(campo_cuotas)
                self._espera_humana(0.5, 1, "viendo opciones cuotas")
                select.select_by_value("60")
            else:
                self._click_humano(campo_cuotas)
                self._tipear_humano(campo_cuotas, "60")
            
            self._espera_humana(1, 2, "confirmando cuotas")
            
        except Exception as e:
            logger.warning(f"Error configurando cuotas: {e}")
        
        try:
            campo_dia = self.driver.find_element(By.CSS_SELECTOR, "input[name*='dia'], select[name*='dia']")
            
            logger.info("üìÖ Configurando d√≠a = 2")
            self._mover_mouse_humano(campo_dia)
            self._espera_humana(0.5, 1, "pensando en d√≠a")
            
            if campo_dia.tag_name == 'select':
                select = Select(campo_dia)
                self._espera_humana(0.5, 1, "viendo opciones d√≠a")
                select.select_by_value("2")
            else:
                self._click_humano(campo_dia)
                self._tipear_humano(campo_dia, "2")
            
            self._espera_humana(1, 2, "confirmando d√≠a")
            
        except Exception as e:
            logger.warning(f"Error configurando d√≠a: {e}")
    
    def _llenar_informacion_personal(self, cliente_data):
        """Llenar informaci√≥n personal fija DE FORMA HUMANA"""
        logger.info("üìã Llenando informaci√≥n personal de forma humana...")
        
        self._leer_pagina_humano()
        
        logger.info("üÜî Llenando CI...")
        self._llenar_campo_si_existe("input[name*='ci'], input[name*='cedula']", "123456789")
        
        try:
            logger.info("üíë Seleccionando estado civil...")
            estado_civil = self.driver.find_element(By.CSS_SELECTOR, "select[name*='estado'], select[name*='civil']")
            self._mover_mouse_humano(estado_civil)
            self._espera_humana(0.5, 1.5, "pensando estado civil")
            
            select = Select(estado_civil)
            select.select_by_visible_text("Soltero")
            self._espera_humana(1, 2, "confirmando estado civil")
        except:
            pass
        
        logger.info("üó∫Ô∏è Configurando ubicaci√≥n...")
        self._seleccionar_ubicacion()
        
        logger.info("üè† Llenando direcci√≥n...")
        self._llenar_campo_si_existe("input[name*='direccion']", "Aven")
        
        try:
            logger.info("üíº Seleccionando modalidad trabajo...")
            modalidad = self.driver.find_element(By.CSS_SELECTOR, "select[name*='trabajo']")
            self._mover_mouse_humano(modalidad)
            self._espera_humana(0.5, 1.5, "pensando modalidad trabajo")
            
            select = Select(modalidad)
            select.select_by_visible_text("Jubilado")
            self._espera_humana(1, 2, "confirmando modalidad")
        except:
            pass
        
        renta_liquida = int(cliente_data['RENTA LIQUIDA'])
        logger.info(f"üí∞ Llenando renta l√≠quida: {renta_liquida}")
        self._llenar_campo_si_existe("input[name*='pension'], input[name*='renta'], input[name*='liquida']", str(renta_liquida))
        
        self._espera_humana(2, 4, "revisando informaci√≥n completa")
        
        self._click_continuar()
    
    def _seleccionar_ubicacion(self):
        """Seleccionar ubicaci√≥n fija DE FORMA HUMANA"""
        try:
            logger.info("üåé Seleccionando regi√≥n...")
            region = self.driver.find_element(By.CSS_SELECTOR, "select[name*='region']")
            self._mover_mouse_humano(region)
            self._espera_humana(0.5, 1.5, "viendo regiones")
            
            select = Select(region)
            select.select_by_visible_text("Coquimbo")
            self._espera_humana(2, 3, "cargando ciudades")
        except:
            pass
        
        try:
            logger.info("üèôÔ∏è Seleccionando ciudad...")
            ciudad = self.driver.find_element(By.CSS_SELECTOR, "select[name*='ciudad']")
            self._mover_mouse_humano(ciudad)
            self._espera_humana(0.5, 1.5, "viendo ciudades")
            
            select = Select(ciudad)
            select.select_by_visible_text("Elqui")
            self._espera_humana(2, 3, "cargando comunas")
        except:
            pass
        
        try:
            logger.info("üèòÔ∏è Seleccionando comuna...")
            comuna = self.driver.find_element(By.CSS_SELECTOR, "select[name*='comuna']")
            self._mover_mouse_humano(comuna)
            self._espera_humana(0.5, 1.5, "viendo comunas")
            
            select = Select(comuna)
            select.select_by_visible_text("La Serena")
            self._espera_humana(1, 2, "confirmando ubicaci√≥n")
        except:
            pass
    
    def procesar_todos_los_clientes(self):
        """Procesar todos los clientes CON COMPORTAMIENTO S√öPER HUMANO"""
        logger.info("üöÄ INICIANDO PROCESAMIENTO S√öPER HUMANO...")
        
        todos_los_clientes = self.leer_todos_los_clientes()
        
        if not todos_los_clientes:
            logger.info("‚ÑπÔ∏è No hay clientes para procesar en ninguna planilla")
            return True
        
        total_clientes = len(todos_los_clientes)
        logger.info(f"üìä Total clientes a procesar CON COMPORTAMIENTO HUMANO: {total_clientes}")
        
        for idx, cliente in enumerate(todos_los_clientes, 1):
            logger.info(f"\n{'='*20} CLIENTE {idx}/{total_clientes} (S√öPER HUMANO) {'='*20}")
            logger.info(f"üë• Agente: {cliente['agente']}")
            logger.info(f"üë§ Cliente: {cliente['Nombre Cliente']} - {cliente['RUT']}")
            
            try:
                if idx > 1:
                    logger.info("ü§î Simulando pausa humana entre clientes...")
                    self._espera_humana(8, 15, "descanso entre clientes")
                    
                    try:
                        logger.info("üîÑ Regresando al dashboard de forma humana...")
                        self.driver.get("https://prescriptores.salvum.cl/")
                        self._espera_humana(3, 6, "cargando dashboard")
                        
                        self._leer_pagina_humano()
                        
                    except Exception as e:
                        logger.warning(f"Error regresando al dashboard: {e}")
                        self._espera_humana(3, 5, "recuperaci√≥n dashboard")
                
                logger.info(f"üë§ Iniciando procesamiento humano del cliente {idx}...")
                if self.procesar_cliente_individual(cliente):
                    logger.info(f"‚úÖ Cliente {idx} completado CON COMPORTAMIENTO HUMANO")
                    
                    self._espera_humana(2, 4, "satisfacci√≥n por cliente completado")
                    
                else:
                    logger.error(f"‚ùå Cliente {idx} fall√≥")
                    
                    self._espera_humana(3, 6, "procesando fallo")
                
            except Exception as e:
                logger.error(f"‚ùå Error procesando cliente {idx}: {e}")
                
                self._espera_humana(5, 8, "recuper√°ndose de error")
                continue
        
        logger.info("üéâ ¬°PROCESAMIENTO S√öPER HUMANO COMPLETADO!")
        
        self._espera_humana(3, 6, "satisfacci√≥n final por trabajo completado")
        
        return True
    
    def generar_reporte_final(self):
        """Generar reporte final por agente"""
        logger.info("üìä Generando reporte final...")
        
        total_procesados = len(self.clientes_procesados)
        total_fallidos = len(self.clientes_fallidos)
        total_clientes = total_procesados + total_fallidos
        
        procesados_por_agente = {}
        fallidos_por_agente = {}
        
        for cliente in self.clientes_procesados:
            agente = cliente['agente']
            if agente not in procesados_por_agente:
                procesados_por_agente[agente] = []
            procesados_por_agente[agente].append(cliente)
        
        for cliente in self.clientes_fallidos:
            agente = cliente['agente']
            if agente not in fallidos_por_agente:
                fallidos_por_agente[agente] = []
            fallidos_por_agente[agente].append(cliente)
        
        reporte = {
            'timestamp': datetime.now().isoformat(),
            'version': 'ULTRA_CORREGIDA',
            'configuracion_chrome': 'SIN_PROXY_GARANTIZADO',
            'estados_validos_usados': ESTADOS_VALIDOS_PROCESAR,
            'total_agentes': len(self.agentes_config),
            'total_clientes': total_clientes,
            'exitosos': total_procesados,
            'fallidos': total_fallidos,
            'tasa_exito': f"{(total_procesados/total_clientes*100):.1f}%" if total_clientes > 0 else "0%",
            'por_agente': {
                'exitosos': procesados_por_agente,
                'fallidos': fallidos_por_agente
            },
            'detalles_completos': {
                'exitosos': self.clientes_procesados,
                'fallidos': self.clientes_fallidos
            }
        }
        
        with open('reporte_salvum_ultra_corregido.json', 'w', encoding='utf-8') as f:
            json.dump(reporte, f, indent=2, ensure_ascii=False)
        
        logger.info("="*70)
        logger.info("üìä REPORTE FINAL - VERSI√ìN ULTRA-CORREGIDA")
        logger.info("="*70)
        logger.info(f"üîß Configuraci√≥n: Chrome sin proxy garantizado")
        logger.info(f"üéØ Estados v√°lidos: {ESTADOS_VALIDOS_PROCESAR}")
        logger.info(f"üë• Total agentes: {len(self.agentes_config)}")
        logger.info(f"‚úÖ Clientes exitosos: {total_procesados}")
        logger.info(f"‚ùå Clientes fallidos: {total_fallidos}")
        logger.info(f"üìà Tasa de √©xito: {reporte['tasa_exito']}")
        
        logger.info("\nüìã RESULTADOS POR AGENTE:")
        for agente in self.agentes_config:
            nombre = agente['nombre']
            exitosos = len(procesados_por_agente.get(nombre, []))
            fallidos = len(fallidos_por_agente.get(nombre, []))
            total_agente = exitosos + fallidos
            
            if total_agente > 0:
                tasa_agente = (exitosos/total_agente*100)
                logger.info(f"  üë• {nombre}: {exitosos}‚úÖ {fallidos}‚ùå ({tasa_agente:.1f}%)")
                
                if exitosos > 0:
                    for cliente in procesados_por_agente[nombre]:
                        logger.info(f"    ‚úÖ {cliente['cliente']} ({cliente['rut']})")
                
                if fallidos > 0:
                    for cliente in fallidos_por_agente[nombre]:
                        logger.info(f"    ‚ùå {cliente['cliente']} ({cliente['rut']}): {cliente['error']}")
            else:
                logger.info(f"  üë• {nombre}: Sin clientes para procesar")
        
        logger.info("="*70)
        
        return reporte
    
    def ejecutar_automatizacion_completa(self):
        """VERSI√ìN ULTRA-CORREGIDA: Automatizaci√≥n con limpieza de proxy garantizada"""
        logger.info("üöÄ INICIANDO AUTOMATIZACI√ìN (VERSI√ìN ULTRA-CORREGIDA)")
        logger.info("="*70)
        logger.info(f"üîß Chrome: Sin proxy garantizado (limpieza de entorno)")
        logger.info(f"üéØ Estados v√°lidos: {ESTADOS_VALIDOS_PROCESAR}")
        logger.info("="*70)
        
        try:
            # Limpiar entorno de proxy antes de empezar
            logger.info("üßπ Limpiando configuraci√≥n de proxy del entorno...")
            proxy_vars_found = []
            for var in ['HTTP_PROXY', 'HTTPS_PROXY', 'http_proxy', 'https_proxy', 'ALL_PROXY', 'all_proxy']:
                if var in os.environ:
                    proxy_vars_found.append(f"{var}={os.environ[var]}")
            
            if proxy_vars_found:
                logger.info(f"üîç Variables de proxy encontradas: {proxy_vars_found}")
            else:
                logger.info("‚úÖ No hay variables de proxy en el entorno")
            
            vps_ok, ip_data = self.verificar_conexion_vps()
            if vps_ok:
                logger.info("‚úÖ VPS Chile disponible para verificaciones")
            else:
                logger.warning("‚ö†Ô∏è VPS no disponible - Continuando sin verificaciones VPS")
            
            if not self.cargar_configuracion_agentes():
                return False
            
            if not self.configurar_google_sheets():
                return False
            
            todos_los_clientes = self.leer_todos_los_clientes()
            if not todos_los_clientes:
                logger.info("‚ÑπÔ∏è No hay clientes para procesar")
                return True
            
            logger.info("üîß Configurando navegador con limpieza expl√≠cita de proxy...")
            if not self.configurar_navegador():
                logger.error("‚ùå Error configurando navegador")
                return False
            
            if not self.realizar_login():
                logger.error("‚ùå Login fall√≥")
                return False
            
            self.procesar_todos_los_clientes()
            
            self.generar_reporte_final()
            
            logger.info("üéâ ¬°AUTOMATIZACI√ìN ULTRA-CORREGIDA COMPLETADA!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en automatizaci√≥n: {e}")
            import traceback
            logger.error(f"üìã Traceback completo: {traceback.format_exc()}")
            return False
            
        finally:
            if self.driver:
                try:
                    self.driver.quit()
                    logger.info("üîí Navegador cerrado correctamente")
                except:
                    pass

def main():
    """Funci√≥n principal"""
    automator = SalvumMultiplePlanillasConVPS()
    
    print("üá®üá± AUTOMATIZACI√ìN SALVUM - VERSI√ìN ULTRA-CORREGIDA")
    print("üìä Chrome sin proxy garantizado + Limpieza de entorno")
    print(f"üéØ Estados v√°lidos: {ESTADOS_VALIDOS_PROCESAR}")
    print("-"*70)
    
    success = automator.ejecutar_automatizacion_completa()
    
    if success:
        print("\n‚úÖ ¬°AUTOMATIZACI√ìN EXITOSA!")
        print("üìã Ver reporte_salvum_ultra_corregido.json para detalles")
        print("üìä Estados actualizados en todas las planillas")
        print("üîß Versi√≥n ultra-corregida con proxy garantizado deshabilitado")
    else:
        print("\n‚ùå Error en automatizaci√≥n")

if __name__ == "__main__":
    main()
