#!/usr/bin/env python3
"""
AUTOMATIZACI√ìN SALVUM - VERSI√ìN CORREGIDA CON SELECTORES ANGULAR
Basado en la estructura real de los componentes Angular
"""
import os
import time
import json
import logging
import gspread
import subprocess
import socket
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
from google.oauth2.service_account import Credentials

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üá®üá± CONFIGURACI√ìN VPS CHILE
SOCKS_PROXY = "socks5://localhost:8080"
VPS_IP_ESPERADA = "45.7.230.109"

# üéØ ESTADOS V√ÅLIDOS PARA PROCESAR
ESTADOS_VALIDOS_PROCESAR = [
    'NUEVO', 'PROCESAR', 'PENDIENTE', 'LISTO', 
    'READY', 'AUTOMATIZAR', 'SI', 'YES', 'PROCESO'
]

class SalvumAutomacionCorregida:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.gc = None
        self.agentes_config = []
        self.clientes_procesados = []
        self.clientes_fallidos = []
        
    def verificar_conexion_vps(self):
        """Verificar que estamos conectados correctamente al VPS Chile"""
        logger.info("üîç VERIFICANDO CONEXI√ìN AL VPS CHILE")
        logger.info("-" * 50)
        
        try:
            import requests
            
            proxies = {
                'http': SOCKS_PROXY,
                'https': SOCKS_PROXY
            }
            
            response = requests.get('https://ipinfo.io/json', 
                                  proxies=proxies, 
                                  timeout=15)
            ip_data = response.json()
            
            ip_actual = ip_data.get('ip')
            pais = ip_data.get('country')
            ciudad = ip_data.get('city')
            
            logger.info(f"üìç IP actual: {ip_actual}")
            logger.info(f"üè¢ Pa√≠s: {pais}")
            logger.info(f"üèôÔ∏è Ciudad: {ciudad}")
            
            if ip_actual == VPS_IP_ESPERADA:
                logger.info(f"‚úÖ PERFECTO: Usando VPS chileno ({VPS_IP_ESPERADA})")
            else:
                logger.warning(f"‚ö†Ô∏è IP diferente a la esperada. Esperada: {VPS_IP_ESPERADA}, Actual: {ip_actual}")
            
            if pais == 'CL':
                logger.info("üá®üá± ‚úÖ CONFIRMADO: Conexi√≥n desde Chile")
                return True, ip_data
            else:
                logger.error(f"‚ùå ERROR: No estamos en Chile. Pa√≠s detectado: {pais}")
                return False, ip_data
                
        except Exception as e:
            logger.error(f"‚ùå Error verificando conexi√≥n VPS: {e}")
            return False, {'error': str(e)}

    def verificar_tunel_socks(self):
        """Verificar t√∫nel SOCKS (solo para verificaciones HTTP)"""
        logger.info("üîç Verificando t√∫nel SOCKS...")
        
        try:
            result = subprocess.run(['pgrep', '-f', 'ssh.*-D.*8080'], 
                                  capture_output=True, text=True)
            if result.returncode != 0:
                logger.error("‚ùå Proceso SSH del t√∫nel no encontrado")
                return False
            
            logger.info(f"‚úÖ Proceso SSH encontrado: PID {result.stdout.strip()}")
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex(('localhost', 8080))
            sock.close()
            
            if result != 0:
                logger.error("‚ùå Puerto 8080 no est√° disponible")
                return False
            
            logger.info("‚úÖ Puerto 8080 escuchando")
            
            import requests
            proxies = {'http': SOCKS_PROXY, 'https': SOCKS_PROXY}
            response = requests.get('https://ipinfo.io/json', 
                                  proxies=proxies, timeout=10)
            
            if response.status_code == 200:
                ip_data = response.json()
                logger.info(f"‚úÖ T√∫nel funcional - IP: {ip_data.get('ip')}, Pa√≠s: {ip_data.get('country')}")
                return True
            else:
                logger.error("‚ùå T√∫nel no responde correctamente")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error verificando t√∫nel: {e}")
            return False
        
    def cargar_configuracion_agentes(self):
        """Cargar configuraci√≥n de m√∫ltiples agentes desde config.json"""
        logger.info("üìã Cargando configuraci√≥n de agentes...")
        
        try:
            if os.path.exists('config.json'):
                with open('config.json', 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                agentes_activos = [
                    agente for agente in config.get('agentes', []) 
                    if agente.get('activo', True)
                ]
                
                self.agentes_config = agentes_activos
                logger.info(f"‚úÖ {len(agentes_activos)} agentes configurados desde config.json")
                
                for agente in agentes_activos:
                    logger.info(f"  üë• {agente['nombre']} - Sheet: ...{agente['sheet_id'][-8:]}")
                
                return len(agentes_activos) > 0
                
            else:
                logger.info("üìã config.json no encontrado, usando configuraci√≥n b√°sica...")
                sheet_id = os.getenv('GOOGLE_SHEET_ID')
                
                if sheet_id:
                    self.agentes_config = [{
                        'nombre': 'Agente Principal',
                        'sheet_id': sheet_id,
                        'activo': True
                    }]
                    logger.info("‚úÖ 1 planilla configurada desde variable de entorno")
                    return True
                else:
                    logger.error("‚ùå No se encontr√≥ configuraci√≥n de planillas")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error cargando configuraci√≥n: {e}")
            return False
    
    def configurar_google_sheets(self):
        """Configurar conexi√≥n con Google Sheets"""
        logger.info("üìä Configurando Google Sheets...")
        
        try:
            creds_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
            if creds_json:
                creds_dict = json.loads(creds_json)
                creds = Credentials.from_service_account_info(creds_dict)
            else:
                creds = Credentials.from_service_account_file('credentials.json')
            
            scoped_creds = creds.with_scopes([
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ])
            
            self.gc = gspread.authorize(scoped_creds)
            
            logger.info("‚úÖ Google Sheets configurado")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando Google Sheets: {e}")
            return False
    
    def leer_clientes_desde_planilla(self, sheet_id, nombre_agente):
        """Leer clientes con manejo de acentos y estados flexibles"""
        logger.info(f"üìñ Leyendo clientes de {nombre_agente}...")
        
        try:
            spreadsheet = self.gc.open_by_key(sheet_id)
            
            worksheet = None
            nombres_hoja_posibles = [
                'Mis_Clientes_Financiamiento',
                'sheet1', 'Hoja1', 'Sheet1'
            ]
            
            for nombre_hoja in nombres_hoja_posibles:
                try:
                    worksheet = spreadsheet.worksheet(nombre_hoja)
                    logger.info(f"‚úÖ Hoja encontrada: '{nombre_hoja}'")
                    break
                except:
                    continue
            
            if not worksheet:
                worksheet = spreadsheet.sheet1
                logger.info("‚ö†Ô∏è Usando primera hoja disponible")
            
            records = worksheet.get_all_records()
            logger.info(f"üìä Total registros en planilla: {len(records)}")
            
            if not records:
                logger.warning(f"‚ö†Ô∏è {nombre_agente}: Planilla vac√≠a")
                return []
            
            headers_reales = list(records[0].keys())
            logger.info(f"üìã Headers encontrados: {headers_reales}")
            
            # Verificar columnas cr√≠ticas con manejo de acentos
            tiene_procesar = any('PROCESAR' in h.upper() for h in headers_reales)
            tiene_renta = any(
                ('RENTA' in h.upper() and 'LIQUIDA' in h.upper()) or
                ('RENTA' in h.upper() and 'L√çQUIDA' in h.upper())
                for h in headers_reales
            )
            tiene_nombre = any('NOMBRE' in h.upper() and 'CLIENTE' in h.upper() for h in headers_reales)
            
            if not tiene_procesar:
                logger.error(f"‚ùå {nombre_agente}: Falta columna PROCESAR")
                return []
            if not tiene_renta:
                logger.error(f"‚ùå {nombre_agente}: Falta columna RENTA LIQUIDA/L√çQUIDA")
                return []
            if not tiene_nombre:
                logger.error(f"‚ùå {nombre_agente}: Falta columna Nombre Cliente")
                return []
            
            logger.info("‚úÖ Estructura de planilla v√°lida")
            logger.info(f"üéØ Estados v√°lidos: {ESTADOS_VALIDOS_PROCESAR}")
            
            clientes_procesar = []
            
            for i, record in enumerate(records, start=2):
                # Buscar renta con diferentes variantes
                renta_liquida = (record.get('RENTA LIQUIDA', 0) or 
                               record.get('RENTA L√çQUIDA', 0) or
                               record.get('Renta Liquida', 0) or
                               record.get('Renta L√≠quida', 0))
                
                procesar = str(record.get('PROCESAR', '')).upper().strip()
                
                try:
                    if isinstance(renta_liquida, str):
                        renta_limpia = ''.join(c for c in renta_liquida if c.isdigit() or c in '.,')
                        renta_liquida = float(renta_limpia.replace(',', '.')) if renta_limpia else 0
                    else:
                        renta_liquida = float(renta_liquida) if renta_liquida else 0
                except:
                    renta_liquida = 0
                
                logger.info(f"üîç Fila {i}: PROCESAR='{procesar}', RENTA={renta_liquida}")
                
                if renta_liquida > 0 and procesar in ESTADOS_VALIDOS_PROCESAR:
                    
                    nombre_cliente = record.get('Nombre Cliente', '')
                    rut_cliente = record.get('RUT', '')
                    
                    if not nombre_cliente.strip():
                        logger.warning(f"‚ö†Ô∏è Fila {i}: Nombre cliente vac√≠o")
                        continue
                    
                    if not rut_cliente.strip():
                        logger.warning(f"‚ö†Ô∏è Fila {i}: RUT vac√≠o")
                        continue
                    
                    monto_financiar = self._limpiar_numero(record.get('Monto Financiamiento', 0))
                    
                    if monto_financiar <= 0:
                        logger.warning(f"‚ö†Ô∏è Fila {i}: Monto inv√°lido: {monto_financiar}")
                        continue
                    
                    cliente = {
                        'agente': nombre_agente,
                        'sheet_id': sheet_id,
                        'row_number': i,
                        'Nombre Cliente': nombre_cliente,
                        'RUT': rut_cliente,
                        'Email': record.get('Email', ''),
                        'Telefono': record.get('Tel√©fono', record.get('Telefono', '')),
                        'Monto Financiar Original': monto_financiar,
                        'RENTA LIQUIDA': renta_liquida,
                        'Modelo Casa': record.get('Modelo Casa', ''),
                        'Precio Casa': self._limpiar_numero(record.get('Precio Casa', 0)),
                        'Origen': record.get('Origen', ''),
                        'Estado Original': procesar
                    }
                    clientes_procesar.append(cliente)
                    
                    logger.info(f"  ‚úÖ Cliente agregado: {nombre_cliente} (RUT: {rut_cliente}) - Monto: {monto_financiar} - Estado: {procesar}")
            
            logger.info(f"‚úÖ {nombre_agente}: {len(clientes_procesar)} clientes para procesar")
            
            return clientes_procesar
            
        except Exception as e:
            logger.error(f"‚ùå Error leyendo planilla de {nombre_agente}: {e}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
            return []
    
    def _limpiar_numero(self, valor):
        """Limpiar y convertir valores num√©ricos"""
        try:
            if isinstance(valor, str):
                limpio = ''.join(c for c in valor if c.isdigit())
                return int(limpio) if limpio else 0
            return int(valor) if valor else 0
        except:
            return 0
    
    def leer_todos_los_clientes(self):
        """Leer clientes de todas las planillas configuradas"""
        logger.info("üîç Buscando clientes en todas las planillas...")
        
        todos_los_clientes = []
        
        for agente in self.agentes_config:
            if not agente.get('activo', True):
                logger.info(f"‚è≠Ô∏è Saltando {agente['nombre']} (inactivo)")
                continue
            
            clientes = self.leer_clientes_desde_planilla(
                agente['sheet_id'], 
                agente['nombre']
            )
            todos_los_clientes.extend(clientes)
        
        logger.info(f"üéØ TOTAL ENCONTRADO: {len(todos_los_clientes)} clientes para procesar")
        
        return todos_los_clientes
    
    def actualizar_estado_cliente(self, cliente_data, estado, resultado=""):
        """Actualizar estado del cliente en su planilla espec√≠fica"""
        try:
            sheet_id = cliente_data['sheet_id']
            row_number = cliente_data['row_number']
            agente = cliente_data['agente']
            
            spreadsheet = self.gc.open_by_key(sheet_id)
            
            worksheet = None
            nombres_hoja_posibles = ['Mis_Clientes_Financiamiento', 'sheet1', 'Hoja1', 'Sheet1']
            
            for nombre_hoja in nombres_hoja_posibles:
                try:
                    worksheet = spreadsheet.worksheet(nombre_hoja)
                    break
                except:
                    continue
            
            if not worksheet:
                worksheet = spreadsheet.sheet1
            
            worksheet.update_cell(row_number, 13, estado)
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            worksheet.update_cell(row_number, 14, f"Procesado: {timestamp}")
            
            if resultado:
                worksheet.update_cell(row_number, 15, resultado)
            
            logger.info(f"‚úÖ {agente} - Estado actualizado en fila {row_number}: {estado}")
            
        except Exception as e:
            logger.error(f"‚ùå Error actualizando estado: {e}")
    
    def configurar_navegador(self):
        """üîß CONFIGURACI√ìN CHROME ULTRA-EXPL√çCITA (GARANTIZA NO-PROXY)"""
        logger.info("üîß Configurando navegador con configuraci√≥n ultra-expl√≠cita...")
        
        # Verificar t√∫nel SOCKS (solo para logging)
        if not self.verificar_tunel_socks():
            logger.warning("‚ö†Ô∏è T√∫nel SOCKS no disponible - Chrome usar√° conexi√≥n directa")
        
        # üßπ LIMPIAR VARIABLES DE ENTORNO DE PROXY
        logger.info("üßπ Limpiando variables de entorno de proxy...")
        env_backup = {}
        proxy_env_vars = [
            'HTTP_PROXY', 'HTTPS_PROXY', 'FTP_PROXY', 'SOCKS_PROXY',
            'http_proxy', 'https_proxy', 'ftp_proxy', 'socks_proxy',
            'ALL_PROXY', 'all_proxy', 'NO_PROXY', 'no_proxy'
        ]
        
        for var in proxy_env_vars:
            if var in os.environ:
                env_backup[var] = os.environ[var]
                del os.environ[var]
                logger.info(f"üßπ Variable de proxy eliminada: {var}")
        
        options = Options()
        
        # Configuraci√≥n para GitHub Actions
        if os.getenv('GITHUB_ACTIONS'):
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
        
        # Configuraci√≥n b√°sica
        options.add_argument('--disable-gpu')
        options.add_argument('--window-size=1920,1080')
        
        # üö´ CONFIGURACI√ìN ANTI-PROXY ULTRA-EXPL√çCITA
        logger.info("üö´ Aplicando configuraci√≥n anti-proxy ultra-expl√≠cita...")
        
        # M√©todo 1: Sin proxy
        options.add_argument('--no-proxy-server')
        
        # M√©todo 2: Conexi√≥n directa
        options.add_argument('--proxy-server=direct://')
        
        # M√©todo 3: Bypass todo
        options.add_argument('--proxy-bypass-list=*')
        
        # M√©todo 4: Configuraciones adicionales
        options.add_argument('--disable-proxy-cert-verification')
        options.add_argument('--ignore-certificate-errors')
        options.add_argument('--disable-background-networking')
        
        # Anti-detecci√≥n
        options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--disable-extensions')
        options.add_argument('--disable-plugins')
        options.add_argument('--disable-images')
        options.add_argument('--disable-web-security')
        options.add_argument('--disable-features=VizDisplayCompositor')
        options.add_experimental_option('excludeSwitches', ['enable-automation'])
        options.add_experimental_option('useAutomationExtension', False)
        
        # Preferencias con configuraci√≥n de proxy
        prefs = {
            "profile.default_content_setting_values": {
                "notifications": 2,
                "media_stream": 2,
            },
            "profile.default_content_settings.popups": 0,
            "profile.managed_default_content_settings.images": 2,
            "profile.proxy_mode": "direct",
            "profile.proxy": ""
        }
        options.add_experimental_option("prefs", prefs)
        
        try:
            logger.info("üöÄ Iniciando Chrome con configuraci√≥n ultra-expl√≠cita...")
            
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=options)
            
            self.driver.set_page_load_timeout(90)
            self.driver.implicitly_wait(20)
            self.wait = WebDriverWait(self.driver, 45)  # Aumentado para Angular
            
            self.driver.execute_script("""
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                Object.defineProperty(navigator, 'languages', {get: () => ['es-CL', 'es', 'en']});
                window.chrome = {runtime: {}};
            """)
            
            logger.info("‚úÖ Chrome configurado exitosamente (conexi√≥n directa garantizada)")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando Chrome: {e}")
            return False
            
        finally:
            # Restaurar variables de entorno
            for var, value in env_backup.items():
                os.environ[var] = value
        
    def _espera_humana(self, min_seg=1, max_seg=4, motivo="acci√≥n"):
        """Espera aleatoria que simula comportamiento humano"""
        import random
        tiempo = random.uniform(min_seg, max_seg)
        logger.info(f"‚è≥ Esperando {tiempo:.1f}s ({motivo})...")
        time.sleep(tiempo)
    
    def _mover_mouse_humano(self, elemento):
        """Simular movimiento de mouse humano hacia elemento"""
        try:
            self.driver.execute_script("""
                var elemento = arguments[0];
                var rect = elemento.getBoundingClientRect();
                var event = new MouseEvent('mouseover', {
                    'view': window,
                    'bubbles': true,
                    'cancelable': true,
                    'clientX': rect.left + rect.width/2,
                    'clientY': rect.top + rect.height/2
                });
                elemento.dispatchEvent(event);
            """, elemento)
            self._espera_humana(0.5, 1.5, "movimiento mouse")
        except:
            pass
    
    def _tipear_humano(self, campo, texto):
        """Tipear texto de forma humana (con pausas aleatorias)"""
        import random
        
        try:
            campo.clear()
            self._espera_humana(0.5, 1, "despu√©s de limpiar")
            
            for char in texto:
                campo.send_keys(char)
                pausa = random.uniform(0.05, 0.15)
                time.sleep(pausa)
            
            self._espera_humana(0.5, 1.5, "despu√©s de tipear")
            
        except Exception as e:
            logger.warning(f"Fallback a tipeo normal: {e}")
            campo.clear()
            time.sleep(1)
            campo.send_keys(texto)
            time.sleep(2)
    
    def _click_humano(self, elemento):
        """Click humano con movimiento de mouse"""
        try:
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", elemento)
            self._espera_humana(0.5, 1.5, "scroll al elemento")
            
            self._mover_mouse_humano(elemento)
            
            self._espera_humana(0.3, 0.8, "antes de click")
            elemento.click()
            self._espera_humana(0.5, 1.5, "despu√©s de click")
            
        except:
            try:
                self.driver.execute_script("arguments[0].click();", elemento)
                self._espera_humana(1, 2, "click JavaScript fallback")
            except:
                elemento.click()
                time.sleep(2)
    
    def _leer_pagina_humano(self):
        """Simular que un humano est√° leyendo la p√°gina"""
        try:
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight/4);")
            self._espera_humana(1, 2, "leyendo inicio")
            
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight/2);")
            self._espera_humana(1, 3, "leyendo medio")
            
            self.driver.execute_script("window.scrollTo(0, 0);")
            self._espera_humana(0.5, 1.5, "volviendo arriba")
            
        except:
            self._espera_humana(2, 5, "leyendo p√°gina")
    
    def realizar_login(self):
        """Login h√≠brido (VPS para verificaciones + Chrome directo)"""
        logger.info("üîê Realizando login H√çBRIDO (VPS verificaciones + Chrome directo)...")
        
        max_intentos = 3
        for intento in range(1, max_intentos + 1):
            logger.info(f"üîÑ Intento de login {intento}/{max_intentos}")
            
            try:
                vps_ok, ip_data = self.verificar_conexion_vps()
                if vps_ok:
                    logger.info("‚úÖ VPS Chile disponible para verificaciones")
                else:
                    logger.warning("‚ö†Ô∏è VPS no disponible - Continuando con Chrome directo")
                
                logger.info("üîó Accediendo a Salvum con Chrome directo...")
                self.driver.get("https://prescriptores.salvum.cl/login")
                time.sleep(15)
                
                url = self.driver.current_url
                titulo = self.driver.title
                html_size = len(self.driver.page_source)
                
                logger.info(f"üìç URL: {url}")
                logger.info(f"üìÑ T√≠tulo: {titulo}")
                logger.info(f"üìä HTML size: {html_size}")
                
                screenshot_name = f'salvum_acceso_directo_intento_{intento}.png'
                self.driver.save_screenshot(screenshot_name)
                logger.info(f"üì∏ Screenshot: {screenshot_name}")
                
                page_source = self.driver.page_source.lower()
                
                if "bbva" in titulo.lower():
                    logger.error(f"‚ùå Intento {intento}: Redirigido a BBVA")
                    if intento < max_intentos:
                        time.sleep(20)
                        continue
                    return False
                    
                elif html_size < 5000:
                    logger.error(f"‚ùå Intento {intento}: P√°gina muy peque√±a")
                    if intento < max_intentos:
                        time.sleep(15)
                        continue
                    return False
                    
                elif any(palabra in page_source for palabra in ["salvum", "usuario", "login", "ob forum"]):
                    logger.info(f"‚úÖ Intento {intento}: ACCESO EXITOSO a Salvum")
                    return self._realizar_login_optimizado()
                else:
                    logger.warning(f"‚ö†Ô∏è Intento {intento}: Estado desconocido")
                    if intento < max_intentos:
                        time.sleep(10)
                        continue
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå Error en intento {intento}: {e}")
                if intento < max_intentos:
                    time.sleep(15)
                    continue
                return False
        
        logger.error("‚ùå Todos los intentos de login fallaron")
        return False
    
    def _realizar_login_optimizado(self):
        """M√©todo de login con selectores PRECISOS basados en inspecci√≥n real"""
        logger.info("üîë INICIANDO LOGIN CON SELECTORES PRECISOS")
        logger.info("-" * 50)
        
        try:
            usuario = os.getenv('SALVUM_USER')
            password = os.getenv('SALVUM_PASS')
            
            logger.info(f"üë§ Usuario: {usuario}")
            logger.info("üîí Password: [PROTEGIDO]")
            
            logger.info("üëÅÔ∏è Simulando lectura humana de la p√°gina...")
            self._leer_pagina_humano()
            
            self._espera_humana(3, 7, "comportamiento humano inicial")
            
            logger.info("üîç Buscando campos de login con selectores PRECISOS...")
            
            # CAMPO USUARIO - Selector exacto: input[id="Usuario"][name="Usuario"]
            logger.info("üë§ Buscando campo Usuario...")
            try:
                campo_usuario = self.wait.until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "input[id='Usuario'][name='Usuario']"))
                )
                logger.info("‚úÖ Campo Usuario encontrado con selector exacto")
                self._mover_mouse_humano(campo_usuario)
                self._espera_humana(0.5, 1, "inspeccionando campo usuario")
            except Exception as e:
                logger.error(f"‚ùå No se encontr√≥ campo Usuario con selector exacto: {e}")
                # Fallback a selectores gen√©ricos
                try:
                    campo_usuario = self.driver.find_element(By.CSS_SELECTOR, "input[type='text']")
                    logger.info("‚ö†Ô∏è Campo Usuario encontrado con selector gen√©rico")
                except:
                    logger.error("‚ùå No se encontr√≥ campo Usuario")
                    return False
            
            # CAMPO CONTRASE√ëA - Selector exacto: input[id="Contrase√±a"][name="Contrase√±a"]
            logger.info("üîí Buscando campo Contrase√±a...")
            try:
                campo_password = self.wait.until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "input[id='Contrase√±a'][name='Contrase√±a']"))
                )
                logger.info("‚úÖ Campo Contrase√±a encontrado con selector exacto")
                self._mover_mouse_humano(campo_password)
                self._espera_humana(0.5, 1, "inspeccionando campo contrase√±a")
            except Exception as e:
                logger.error(f"‚ùå No se encontr√≥ campo Contrase√±a con selector exacto: {e}")
                # Fallback a selector gen√©rico
                try:
                    campo_password = self.driver.find_element(By.CSS_SELECTOR, "input[type='password']")
                    logger.info("‚ö†Ô∏è Campo Contrase√±a encontrado con selector gen√©rico")
                except:
                    logger.error("‚ùå No se encontr√≥ campo Contrase√±a")
                    return False
            
            logger.info("‚úèÔ∏è Llenando campos de forma humana...")
            
            # LLENAR USUARIO
            logger.info("üë§ Llenando usuario...")
            self._click_humano(campo_usuario)
            # Asegurar que el campo est√© limpio
            campo_usuario.clear()
            self._espera_humana(0.5, 1, "limpiando campo usuario")
            self._tipear_humano(campo_usuario, usuario)
            logger.info("‚úÖ Usuario ingresado de forma humana")
            
            self._espera_humana(1, 3, "pausa entre campos")
            
            # LLENAR CONTRASE√ëA
            logger.info("üîí Llenando contrase√±a...")
            self._click_humano(campo_password)
            # Asegurar que el campo est√© limpio
            campo_password.clear()
            self._espera_humana(0.5, 1, "limpiando campo contrase√±a")
            self._tipear_humano(campo_password, password)
            logger.info("‚úÖ Contrase√±a ingresada de forma humana")
            
            self._espera_humana(2, 4, "verificando datos antes de enviar")
            
            self.driver.save_screenshot('salvum_antes_submit_precisos.png')
            logger.info("üì∏ Screenshot antes de submit con selectores precisos")
            
            # BOT√ìN INGRESAR - Selector exacto: button[value="INGRESAR"]
            logger.info("üîò Buscando bot√≥n INGRESAR con selector preciso...")
            try:
                boton_submit = self.wait.until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "button[value='INGRESAR']"))
                )
                logger.info("‚úÖ Bot√≥n INGRESAR encontrado con selector exacto")
                self._mover_mouse_humano(boton_submit)
                self._espera_humana(0.5, 1, "inspeccionando bot√≥n")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è No se encontr√≥ con selector exacto: {e}")
                # Fallback a selector por texto
                try:
                    boton_submit = self.driver.find_element(By.XPATH, "//button[contains(text(), 'INGRESAR')]")
                    logger.info("‚ö†Ô∏è Bot√≥n INGRESAR encontrado por texto")
                except:
                    logger.error("‚ùå No se encontr√≥ bot√≥n INGRESAR")
                    return False
            
            logger.info("üñ±Ô∏è Haciendo click en bot√≥n INGRESAR...")
            self._click_humano(boton_submit)
            logger.info("üîò Click en INGRESAR ejecutado")
            
            logger.info("‚è≥ Esperando respuesta del servidor de forma humana...")
            
            # Esperar respuesta del servidor
            for i in range(3):
                self._espera_humana(3, 5, f"esperando respuesta {i+1}/3")
                
                try:
                    url_actual = self.driver.current_url
                    if "login" not in url_actual.lower():
                        logger.info(f"‚úÖ P√°gina cambi√≥ durante espera: {url_actual}")
                        break
                except:
                    pass
            
            self.driver.save_screenshot('salvum_despues_submit_precisos.png')
            logger.info("üì∏ Screenshot despu√©s de submit con selectores precisos")
            
            nueva_url = self.driver.current_url
            nuevo_titulo = self.driver.title
            
            logger.info(f"üìç Nueva URL: {nueva_url}")
            logger.info(f"üìÑ Nuevo t√≠tulo: {nuevo_titulo}")
            
            self._espera_humana(1, 2, "leyendo resultado")
            
            # Verificar si el login fue exitoso
            if nueva_url != "https://prescriptores.salvum.cl/login" and "login" not in nueva_url.lower():
                logger.info("üéâ ¬°LOGIN CON SELECTORES PRECISOS EXITOSO! - URL cambi√≥")
                self._leer_pagina_humano()
                return True
            else:
                logger.error("‚ùå Login fall√≥ - permanece en p√°gina de login")
                
                # Debug adicional para login fallido
                logger.info("üîç Analizando por qu√© fall√≥ el login...")
                try:
                    # Verificar si hay mensajes de error
                    errores = self.driver.find_elements(By.CSS_SELECTOR, ".error, .alert, .warning")
                    for error in errores:
                        if error.is_displayed():
                            logger.error(f"üí¨ Mensaje de error: {error.text}")
                    
                    # Verificar el estado de los campos
                    try:
                        usuario_valor = campo_usuario.get_attribute("value")
                        logger.info(f"üìã Valor campo usuario: '{usuario_valor}'")
                    except:
                        pass
                    
                    # Screenshot adicional para debug
                    self.driver.save_screenshot('debug_login_fallido.png')
                    
                except Exception as debug_error:
                    logger.warning(f"Error en debug: {debug_error}")
                
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error en proceso de login con selectores precisos: {e}")
            self.driver.save_screenshot('error_login_precisos.png')
            return False
    
    def procesar_cliente_individual(self, cliente_data):
        """Procesar un cliente individual en Salvum CON SELECTORES ANGULAR CORREGIDOS"""
        nombre = cliente_data['Nombre Cliente']
        agente = cliente_data['agente']
        
        logger.info(f"üë§ Procesando: {nombre} ({agente})")
        
        try:
            self.actualizar_estado_cliente(cliente_data, "PROCESANDO")
            
            # ============= PASO 1: BUSCAR Y HACER CLICK EN "NUEVA SOLICITUD" =============
            logger.info("üîò PASO 1: Buscando bot√≥n Nueva Solicitud...")
            
            url_actual = self.driver.current_url
            logger.info(f"üìç URL actual: {url_actual}")
            
            # Si no estamos en credit-request, navegar primero
            if "credit-request" not in url_actual.lower():
                logger.info("üîÑ Navegando a p√°gina de solicitudes...")
                self.driver.get("https://prescriptores.salvum.cl/credit-request")
                self._espera_humana(3, 6, "cargando p√°gina de solicitudes")
            
            # USAR SELECTOR EXACTO DEL BOT√ìN NUEVA SOLICITUD
            try:
                btn_nueva_solicitud = self.wait.until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "button[value='NUEVA SOLICITUD']"))
                )
                logger.info("‚úÖ Bot√≥n Nueva Solicitud encontrado con selector exacto")
                self._click_humano(btn_nueva_solicitud)
                self._espera_humana(4, 8, "cargando formulario de nueva solicitud")
            except:
                logger.error("‚ùå No se encontr√≥ bot√≥n Nueva Solicitud")
                self.driver.save_screenshot(f"error_nueva_solicitud_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
                raise Exception("No se encontr√≥ bot√≥n Nueva Solicitud")
            
            # ============= PASO 2: LLENAR FORMULARIO INICIAL =============
            logger.info("üìã PASO 2: Llenando formulario inicial con selectores precisos...")
            
            # 1. RUT - id="RUT" name="RUT"
            logger.info("üÜî Llenando RUT...")
            try:
                campo_rut = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "input[id='RUT'][name='RUT']")))
                self._click_humano(campo_rut)
                self._tipear_humano(campo_rut, str(cliente_data['RUT']))
                logger.info("‚úÖ RUT llenado exitosamente")
            except:
                logger.error("‚ùå Error llenando RUT")
                raise Exception("No se pudo llenar RUT")
            
            # 2. N√∫mero de Celular - id="N√∫mero de Celular" name="N√∫mero de Celular"
            logger.info("üì± Llenando N√∫mero de Celular...")
            try:
                campo_celular = self.driver.find_element(By.CSS_SELECTOR, "input[id='N√∫mero de Celular'][name='N√∫mero de Celular']")
                self._click_humano(campo_celular)
                self._tipear_humano(campo_celular, str(cliente_data['Telefono']))
                logger.info("‚úÖ N√∫mero de Celular llenado exitosamente")
            except:
                logger.warning("‚ö†Ô∏è No se pudo llenar N√∫mero de Celular")
            
            # 3. Correo Electr√≥nico - id="Correo electr√≥nico" name="Correo electr√≥nico"
            logger.info("üìß Llenando Correo Electr√≥nico...")
            try:
                campo_email = self.driver.find_element(By.CSS_SELECTOR, "input[id='Correo electr√≥nico'][name='Correo electr√≥nico']")
                self._click_humano(campo_email)
                self._tipear_humano(campo_email, str(cliente_data['Email']))
                logger.info("‚úÖ Correo Electr√≥nico llenado exitosamente")
            except:
                logger.warning("‚ö†Ô∏è No se pudo llenar Correo Electr√≥nico")
            
            # 4. Nombre - id="Nombre" name="Nombre"
            logger.info("üë§ Llenando Nombre...")
            try:
                nombre_partes = cliente_data['Nombre Cliente'].split()
                primer_nombre = nombre_partes[0] if nombre_partes else cliente_data['Nombre Cliente']
                
                campo_nombre = self.driver.find_element(By.CSS_SELECTOR, "input[id='Nombre'][name='Nombre']")
                self._click_humano(campo_nombre)
                self._tipear_humano(campo_nombre, primer_nombre)
                logger.info("‚úÖ Nombre llenado exitosamente")
            except:
                logger.warning("‚ö†Ô∏è No se pudo llenar Nombre")
            
            # 5. Apellidos - id="Apellidos" name="Apellidos" - VALOR FIJO: Gonzalez
            logger.info("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Llenando Apellidos...")
            try:
                campo_apellidos = self.driver.find_element(By.CSS_SELECTOR, "input[id='Apellidos'][name='Apellidos']")
                self._click_humano(campo_apellidos)
                self._tipear_humano(campo_apellidos, "Gonzalez")
                logger.info("‚úÖ Apellidos llenado exitosamente")
            except:
                logger.warning("‚ö†Ô∏è No se pudo llenar Apellidos")
            
            # 6. Fecha de Nacimiento - input[type="date"] - VALOR FIJO: 1987-08-25
            logger.info("üéÇ Llenando Fecha de Nacimiento...")
            try:
                campo_fecha = self.driver.find_element(By.CSS_SELECTOR, "input[type='date']")
                # Usar JavaScript para campos de fecha que no son interactables
                self.driver.execute_script("arguments[0].value = '1987-08-25';", campo_fecha)
                # Disparar evento change para que Angular detecte el cambio
                self.driver.execute_script("arguments[0].dispatchEvent(new Event('change', { bubbles: true }));", campo_fecha)
                self._espera_humana(0.5, 1, "confirmando fecha")
                logger.info("‚úÖ Fecha de Nacimiento llenada exitosamente con JavaScript")
            except:
                logger.warning("‚ö†Ô∏è No se pudo llenar Fecha de Nacimiento")
            
            # Screenshot del formulario completado
            self.driver.save_screenshot(f"formulario_inicial_completado_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
            logger.info("üì∏ Screenshot del formulario inicial completado")
            
            # 7. Click en CONTINUAR - button[value="CONTINUAR"]
            logger.info("üîò Haciendo click en CONTINUAR...")
            try:
                btn_continuar = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[value='CONTINUAR']")))
                self._click_humano(btn_continuar)
                self._espera_humana(4, 8, "cargando p√°gina de financiamiento")
                logger.info("‚úÖ Click en CONTINUAR exitoso")
            except:
                logger.error("‚ùå No se pudo hacer click en CONTINUAR")
                raise Exception("No se pudo continuar")
            
            # ============= CONTINUAR CON EL FLUJO DE FINANCIAMIENTO =============
            logger.info("üí∞ Continuando con configuraci√≥n de financiamiento...")
            self._configurar_financiamiento_angular(cliente_data)
            
            # ============= RESULTADO FINAL =============
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            screenshot_path = f"cliente_final_{agente.replace(' ', '_')}_{nombre.replace(' ', '_')}_{timestamp}.png"
            self.driver.save_screenshot(screenshot_path)
            
            url_resultado = self.driver.current_url
            
            resultado_cliente = {
                'agente': agente,
                'cliente': nombre,
                'rut': cliente_data['RUT'],
                'monto': int(cliente_data['Monto Financiar Original']),
                'renta_liquida': cliente_data['RENTA LIQUIDA'],
                'url_resultado': url_resultado,
                'screenshot': screenshot_path,
                'timestamp': timestamp,
                'estado': 'COMPLETADO'
            }
            
            self.actualizar_estado_cliente(cliente_data, "COMPLETADO", f"Exitoso: {url_resultado}")
            
            self.clientes_procesados.append(resultado_cliente)
            logger.info(f"‚úÖ {agente} - Cliente {nombre} procesado exitosamente")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando cliente {nombre} ({agente}): {e}")
            
            # Tomar screenshot del error para debugging
            try:
                error_screenshot = f"error_{agente.replace(' ', '_')}_{nombre.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                self.driver.save_screenshot(error_screenshot)
                logger.info(f"üì∏ Screenshot del error: {error_screenshot}")
            except:
                pass
            
            error_msg = str(e)[:100]
            self.actualizar_estado_cliente(cliente_data, "ERROR", f"Error: {error_msg}")
            
            self.clientes_fallidos.append({
                'agente': agente,
                'cliente': nombre,
                'rut': cliente_data['RUT'],
                'error': error_msg,
                'timestamp': datetime.now().isoformat()
            })
            
            return False

    def _configurar_financiamiento_angular(self, cliente_data):
        """üîß CONFIGURACI√ìN DE FINANCIAMIENTO CON SELECTORES ANGULAR CORREGIDOS"""
        logger.info("üí∞ INICIANDO CONFIGURACI√ìN ANGULAR CORREGIDA...")
        
        try:
            # ============= P√ÅGINA 2: CONFIGURACI√ìN DE FINANCIAMIENTO =============
            logger.info("üìÑ P√ÅGINA 2: Configuraci√≥n de Financiamiento Angular")
            
            # ESPERA EXTENDIDA PARA ANGULAR
            logger.info("‚è≥ Esperando carga completa de Angular...")
            self._espera_humana(5, 8, "cargando p√°gina de financiamiento completamente")
            
            # DEBUG: Informaci√≥n de la p√°gina actual
            try:
                url_actual = self.driver.current_url
                titulo_actual = self.driver.title
                logger.info(f"üìç URL actual: {url_actual}")
                logger.info(f"üìÑ T√≠tulo actual: {titulo_actual}")
                
                # Verificar si hay elementos Angular cargando
                elementos_ng = self.driver.find_elements(By.CSS_SELECTOR, "[ng-reflect], [_ngcontent]")
                logger.info(f"üÖ∞Ô∏è Elementos Angular detectados: {len(elementos_ng)}")
                
                # Verificar selects disponibles
                selects_totales = self.driver.find_elements(By.CSS_SELECTOR, "select")
                logger.info(f"üìã Total selects en p√°gina: {len(selects_totales)}")
                
            except Exception as debug_error:
                logger.warning(f"Error en debug inicial: {debug_error}")
            
            # SCREENSHOT ANTES DE INTENTAR SELECCI√ìN
            self.driver.save_screenshot(f"antes_seleccion_producto_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
            logger.info("üì∏ Screenshot antes de selecci√≥n de producto")
            
            # 1. ¬øQu√© se va a financiar? ‚Üí Seleccionar "Casas modulares"
            logger.info("üè† Seleccionando: Casas modulares (Selectores precisos del DevTools)")
            try:
                producto_seleccionado = False
                
                # ESTRATEGIA 1: Usar el componente form-select espec√≠fico
                logger.info("üîç Estrategia 1: Componente form-select...")
                try:
                    # Buscar el componente form-select por su label
                    form_select = self.driver.find_element(
                        By.CSS_SELECTOR, 
                        "form-select[label='¬øQu√© se va a financiar?']"
                    )
                    logger.info("‚úÖ Componente form-select encontrado")
                    
                    # Buscar el select interno con las clases espec√≠ficas del DevTools
                    select_interno = form_select.find_element(
                        By.CSS_SELECTOR, 
                        "select.ng-pristine.ng-invalid.ng-touched"
                    )
                    
                    if select_interno.is_displayed():
                        select_obj = Select(select_interno)
                        opciones = [opt.text.strip() for opt in select_obj.options]
                        logger.info(f"üìã Opciones en form-select: {opciones}")
                        
                        if "Casas modulares" in opciones:
                            select_obj.select_by_visible_text("Casas modulares")
                            logger.info("‚úÖ Producto seleccionado con form-select: Casas modulares")
                            producto_seleccionado = True
                    
                except Exception as e:
                    logger.warning(f"Estrategia 1 fall√≥: {e}")
                
                # ESTRATEGIA 2: Buscar por div.combo-cont.is-focus espec√≠fico
                if not producto_seleccionado:
                    logger.info("üîç Estrategia 2: div.combo-cont.is-focus...")
                    try:
                        combo_container = self.driver.find_element(
                            By.CSS_SELECTOR, 
                            "div.combo-cont.is-focus.normal-border"
                        )
                        logger.info("‚úÖ Combo container espec√≠fico encontrado")
                        
                        # Hacer click para activar si es necesario
                        self._click_humano(combo_container)
                        self._espera_humana(1, 2, "activando combo espec√≠fico")
                        
                        # Buscar el select dentro del combo
                        select_combo = combo_container.find_element(By.CSS_SELECTOR, "select")
                        select_obj = Select(select_combo)
                        opciones = [opt.text.strip() for opt in select_obj.options]
                        logger.info(f"üìã Opciones en combo-cont: {opciones}")
                        
                        if "Casas modulares" in opciones:
                            select_obj.select_by_visible_text("Casas modulares")
                            logger.info("‚úÖ Producto seleccionado con combo-cont: Casas modulares")
                            producto_seleccionado = True
                    
                    except Exception as e:
                        logger.warning(f"Estrategia 2 fall√≥: {e}")
                
                # ESTRATEGIA 3: Buscar select por clases exactas del DevTools
                if not producto_seleccionado:
                    logger.info("üîç Estrategia 3: Clases exactas del DevTools...")
                    try:
                        select_exacto = self.driver.find_element(
                            By.CSS_SELECTOR, 
                            "select.ng-pristine.ng-invalid.ng-touched"
                        )
                        
                        if select_exacto.is_displayed() and select_exacto.is_enabled():
                            select_obj = Select(select_exacto)
                            opciones = [opt.text.strip() for opt in select_obj.options]
                            logger.info(f"üìã Opciones en select exacto: {opciones}")
                            
                            if "Casas modulares" in opciones:
                                select_obj.select_by_visible_text("Casas modulares")
                                logger.info("‚úÖ Producto seleccionado con clases exactas: Casas modulares")
                                producto_seleccionado = True
                            else:
                                # Intentar por valor como fallback
                                try:
                                    select_obj.select_by_value("2: Object")
                                    logger.info("‚úÖ Producto seleccionado por valor: 2: Object")
                                    producto_seleccionado = True
                                except:
                                    pass
                    
                    except Exception as e:
                        logger.warning(f"Estrategia 3 fall√≥: {e}")
                
                # ESTRATEGIA 4: Click en la opci√≥n p.option-selected para activar
                if not producto_seleccionado:
                    logger.info("üîç Estrategia 4: Click en option-selected...")
                    try:
                        # Buscar el elemento p.option-selected
                        option_selected = self.driver.find_element(
                            By.CSS_SELECTOR, 
                            "p.option-selected"
                        )
                        logger.info("‚úÖ Element option-selected encontrado")
                        
                        # Hacer click para abrir el dropdown
                        self._click_humano(option_selected)
                        self._espera_humana(1, 2, "abriendo dropdown con option-selected")
                        
                        # Ahora intentar seleccionar en el select que se activ√≥
                        selects_activos = self.driver.find_elements(By.CSS_SELECTOR, "select")
                        for select_elem in selects_activos:
                            try:
                                select_obj = Select(select_elem)
                                opciones = [opt.text.strip() for opt in select_obj.options]
                                if "Casas modulares" in opciones:
                                    select_obj.select_by_visible_text("Casas modulares")
                                    logger.info("‚úÖ Producto seleccionado despu√©s de option-selected: Casas modulares")
                                    producto_seleccionado = True
                                    break
                            except:
                                continue
                    
                    except Exception as e:
                        logger.warning(f"Estrategia 4 fall√≥: {e}")
                
                if not producto_seleccionado:
                    logger.error("‚ùå No se pudo seleccionar producto con ninguna estrategia")
                    
                    # DEBUG COMPLETO: Mostrar todos los elementos disponibles
                    try:
                        logger.info("üîç DEBUG: Analizando elementos disponibles...")
                        
                        # Todos los selects
                        todos_selects = self.driver.find_elements(By.CSS_SELECTOR, "select")
                        logger.info(f"üìã Total selects encontrados: {len(todos_selects)}")
                        
                        for i, select_elem in enumerate(todos_selects):
                            try:
                                clases = select_elem.get_attribute("class")
                                select_obj = Select(select_elem)
                                opciones = [opt.text.strip() for opt in select_obj.options]
                                logger.info(f"üìã Select {i} - Clases: {clases} - Opciones: {opciones}")
                            except Exception as debug_error:
                                logger.warning(f"Error debuggeando select {i}: {debug_error}")
                        
                        # Todos los form-select
                        form_selects = self.driver.find_elements(By.CSS_SELECTOR, "form-select")
                        logger.info(f"üìã Total form-selects: {len(form_selects)}")
                        
                        for i, fs in enumerate(form_selects):
                            try:
                                label = fs.get_attribute("label")
                                logger.info(f"üìã Form-select {i} - Label: {label}")
                            except:
                                pass
                                
                    except Exception as debug_error:
                        logger.warning(f"Error en debug completo: {debug_error}")
                    
                    self.driver.save_screenshot(f"error_select_all_strategies_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
                    raise Exception("No se pudo seleccionar producto despu√©s de 4 estrategias espec√≠ficas")
                
                self._espera_humana(3, 5, "esperando que se carguen opciones dependientes")
                
            except Exception as e:
                logger.error(f"‚ùå Error cr√≠tico seleccionando producto Angular: {e}")
                self.driver.save_screenshot(f"error_select_angular_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
                raise Exception("No se pudo seleccionar producto en componente Angular")
            
            # 2. Valor del producto ‚Üí NUEVO SELECTOR BASADO EN HTML REAL
            logger.info("üí∞ Llenando Valor del producto (Componente Angular)...")
            try:
                monto = int(cliente_data['Monto Financiar Original'])
                logger.info(f"üíµ Monto a usar: {monto}")
                
                # NUEVO: Buscar dentro del componente form-money-amount
                campo_valor = self.driver.find_element(
                    By.CSS_SELECTOR, 
                    "form-money-amount[label='Valor del producto'] input[id='import-simple']"
                )
                
                logger.info("‚úÖ Campo valor encontrado en componente Angular")
                
                # Hacer click y enfocar el campo
                self._click_humano(campo_valor)
                
                # Limpiar y llenar usando JavaScript para asegurar compatibilidad con Angular
                self.driver.execute_script("arguments[0].value = '';", campo_valor)
                self.driver.execute_script(f"arguments[0].value = '{monto}';", campo_valor)
                
                # Disparar eventos Angular
                self.driver.execute_script("""
                    var element = arguments[0];
                    element.dispatchEvent(new Event('input', { bubbles: true }));
                    element.dispatchEvent(new Event('change', { bubbles: true }));
                    element.dispatchEvent(new Event('blur', { bubbles: true }));
                """, campo_valor)
                
                logger.info(f"‚úÖ Valor del producto llenado: {monto}")
                self._espera_humana(2, 4, "esperando procesamiento Angular del valor")
                
            except Exception as e:
                logger.error(f"‚ùå Error llenando Valor del producto Angular: {e}")
                self.driver.save_screenshot(f"error_valor_angular_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
                raise Exception("No se pudo llenar valor del producto en componente Angular")
            
            # 3. ¬øCu√°nto quieres solicitar? ‚Üí NUEVO SELECTOR ESPEC√çFICO
            logger.info("üíµ Llenando Cu√°nto quieres solicitar (Componente Angular)...")
            try:
                # NUEVO: Buscar el segundo componente form-money-amount
                campo_solicitar = self.driver.find_element(
                    By.CSS_SELECTOR, 
                    "form-money-amount[label='¬øCu√°nto quieres solicitar?'] input[id='import-simple']"
                )
                
                logger.info("‚úÖ Campo solicitar encontrado en componente Angular")
                
                # Hacer click y enfocar el campo
                self._click_humano(campo_solicitar)
                
                # Limpiar y llenar usando JavaScript
                self.driver.execute_script("arguments[0].value = '';", campo_solicitar)
                self.driver.execute_script(f"arguments[0].value = '{monto}';", campo_solicitar)
                
                # Disparar eventos Angular
                self.driver.execute_script("""
                    var element = arguments[0];
                    element.dispatchEvent(new Event('input', { bubbles: true }));
                    element.dispatchEvent(new Event('change', { bubbles: true }));
                    element.dispatchEvent(new Event('blur', { bubbles: true }));
                """, campo_solicitar)
                
                logger.info(f"‚úÖ Cu√°nto solicitar llenado: {monto}")
                self._espera_humana(2, 4, "esperando procesamiento Angular del monto solicitar")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error llenando Cu√°nto solicitar: {e}")
                # No es cr√≠tico si falla, a veces solo hay un campo
                logger.info("‚ÑπÔ∏è Continuando sin segundo campo de monto")
            
            # ESPERAR A QUE SE CARGUEN LOS SELECTS DIN√ÅMICOS
            logger.info("‚è≥ Esperando que se carguen las opciones din√°micas...")
            self._espera_humana(4, 7, "esperando carga din√°mica de selects Angular")
            
            # 4. Cuota ‚Üí Buscar selects que se cargaron din√°micamente
            logger.info("üìä Seleccionando Cuota: 60 cuotas (Angular din√°mico)")
            try:
                # Esperar un poco m√°s para que Angular termine de cargar
                self._espera_humana(3, 5, "esperando finalizaci√≥n carga Angular")
                
                # Buscar todos los selects disponibles despu√©s de llenar montos
                selects_disponibles = self.driver.find_elements(By.CSS_SELECTOR, "select")
                logger.info(f"üìã Selects disponibles despu√©s de llenar montos: {len(selects_disponibles)}")
                
                cuota_seleccionada = False
                for i, select_elem in enumerate(selects_disponibles):
                    try:
                        select_obj = Select(select_elem)
                        opciones = [option.text.strip() for option in select_obj.options if option.text.strip()]
                        logger.info(f"üìã Select {i}: {opciones}")
                        
                        # Verificar si contiene opciones de cuotas
                        if any("cuota" in opcion.lower() for opcion in opciones):
                            logger.info(f"‚úÖ Select de cuotas encontrado en posici√≥n {i}")
                            # Intentar seleccionar "60 cuotas"
                            for opcion in ["60 cuotas", "60", "60 CUOTAS"]:
                                try:
                                    select_obj.select_by_visible_text(opcion)
                                    logger.info(f"‚úÖ Cuota seleccionada: {opcion}")
                                    cuota_seleccionada = True
                                    break
                                except:
                                    continue
                            if cuota_seleccionada:
                                break
                    except Exception as e:
                        continue
                
                if not cuota_seleccionada:
                    logger.warning("‚ö†Ô∏è No se pudo seleccionar cuota - continuando sin ella")
                    
                self._espera_humana(2, 3, "confirmando cuota")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error seleccionando cuota Angular: {e}")
            
            # 5. D√≠a de Vencimiento ‚Üí Buscar en selects din√°micos
            logger.info("üìÖ Seleccionando D√≠a de Vencimiento: 2 (Angular din√°mico)")
            try:
                # Recargar los selects despu√©s de seleccionar cuota
                selects_actualizados = self.driver.find_elements(By.CSS_SELECTOR, "select")
                
                dia_seleccionado = False
                for i, select_elem in enumerate(selects_actualizados):
                    try:
                        select_obj = Select(select_elem)
                        opciones = [option.text.strip() for option in select_obj.options if option.text.strip()]
                        
                        # Verificar si contiene n√∫meros (d√≠as) y no es el select de productos o cuotas
                        if (any(opcion.strip().isdigit() and opcion.strip() in ["2", "5", "10", "15"] for opcion in opciones) and 
                            not any("cuota" in opcion.lower() or "modular" in opcion.lower() for opcion in opciones)):
                            logger.info(f"‚úÖ Select de d√≠as encontrado en posici√≥n {i}: {opciones}")
                            # Intentar seleccionar "2"
                            try:
                                select_obj.select_by_visible_text("2")
                                logger.info("‚úÖ D√≠a de vencimiento seleccionado: 2")
                                dia_seleccionado = True
                                break
                            except:
                                # Si no funciona por texto, intentar por √≠ndice
                                try:
                                    if len(opciones) > 1:
                                        select_obj.select_by_index(1)  # Primera opci√≥n despu√©s de "Seleccione"
                                        logger.info("‚úÖ D√≠a de vencimiento seleccionado por √≠ndice")
                                        dia_seleccionado = True
                                        break
                                except:
                                    continue
                    except Exception as e:
                        continue
                
                if not dia_seleccionado:
                    logger.warning("‚ö†Ô∏è No se pudo seleccionar d√≠a de vencimiento")
                    
                self._espera_humana(2, 3, "confirmando d√≠a vencimiento")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error seleccionando d√≠a Angular: {e}")
            
            # ESPERAR FINAL PARA QUE ANGULAR PROCESE TODO
            logger.info("‚è≥ Esperando procesamiento final Angular...")
            self._espera_humana(4, 6, "procesamiento final Angular")
            
            # 6. BOT√ìN SIMULAR - MEJORADO PARA ANGULAR
            logger.info("üîò Esperando que el bot√≥n SIMULAR se habilite (Angular)...")
            try:
                # M√©todo mejorado para Angular
                boton_encontrado = False
                for intento in range(25):  # Aumentamos intentos para Angular
                    try:
                        # Buscar bot√≥n que NO tenga la clase 'disable-button'
                        btn_simular = self.driver.find_element(
                            By.CSS_SELECTOR, 
                            "button[value='SIMULAR']:not(.disable-button)"
                        )
                        
                        if btn_simular.is_displayed() and btn_simular.is_enabled():
                            logger.info(f"‚úÖ Bot√≥n SIMULAR habilitado despu√©s de {intento+1} segundos")
                            
                            # Hacer scroll al bot√≥n y click
                            self.driver.execute_script(
                                "arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", 
                                btn_simular
                            )
                            self._espera_humana(1, 2, "scrolling al bot√≥n")
                            self._click_humano(btn_simular)
                            self._espera_humana(8, 12, "procesando simulaci√≥n Angular")
                            logger.info("‚úÖ Simulaci√≥n Angular ejecutada exitosamente")
                            boton_encontrado = True
                            break
                    except:
                        # Si no encuentra el bot√≥n habilitado, esperar 1 segundo m√°s
                        logger.info(f"‚è≥ Intento {intento+1}/25: Bot√≥n Angular a√∫n no habilitado, esperando...")
                        time.sleep(1)
                        continue
                
                if not boton_encontrado:
                    # M√©todo de emergencia para Angular
                    logger.warning("‚ö†Ô∏è Bot√≥n SIMULAR Angular no se habilit√≥, intentando m√©todos de emergencia...")
                    
                    try:
                        btn_simular_disabled = self.driver.find_element(By.CSS_SELECTOR, "button[value='SIMULAR']")
                        logger.info("üîß Intentando habilitar bot√≥n Angular con JavaScript...")
                        
                        # Script espec√≠fico para componentes Angular
                        self.driver.execute_script("""
                            var button = arguments[0];
                            // Remover clase disable-button
                            button.classList.remove('disable-button');
                            // Habilitar el bot√≥n
                            button.disabled = false;
                            // Restablecer estilos
                            button.style.pointerEvents = 'auto';
                            button.style.opacity = '1';
                            // Disparar eventos Angular
                            button.dispatchEvent(new Event('click', { bubbles: true }));
                        """, btn_simular_disabled)
                        
                        self._espera_humana(8, 12, "procesando simulaci√≥n forzada Angular")
                        logger.info("‚úÖ Simulaci√≥n Angular ejecutada con m√©todo de emergencia")
                        boton_encontrado = True
                        
                    except Exception as e:
                        logger.error(f"‚ùå M√©todo de emergencia Angular fall√≥: {e}")
                        self.driver.save_screenshot(f"error_simular_angular_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
                        raise Exception("Error en simulaci√≥n Angular - bot√≥n no disponible")
                
            except Exception as e:
                logger.error(f"‚ùå Error en simulaci√≥n Angular: {e}")
                self.driver.save_screenshot(f"error_simulacion_angular_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
                raise Exception(f"Error en simulaci√≥n Angular: {e}")
            
            # ============= CONTINUAR CON EL RESTO DEL FLUJO (IGUAL QUE ANTES) =============
            logger.info("üìÑ P√ÅGINA 3: Despu√©s de Simulaci√≥n")
            self._espera_humana(4, 6, "cargando resultados de simulaci√≥n")
            
            try:
                btn_continuar = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[value='CONTINUAR']")))
                self._click_humano(btn_continuar)
                self._espera_humana(4, 6, "cargando informaci√≥n personal")
                logger.info("‚úÖ Continuado despu√©s de simulaci√≥n")
            except:
                logger.error("‚ùå No se pudo continuar despu√©s de simulaci√≥n")
                raise Exception("Error continuando despu√©s de simulaci√≥n")
            
            # ============= RESTO DEL FLUJO IGUAL QUE ANTES =============
            # (Informaci√≥n personal, ubicaci√≥n, laboral, evaluaci√≥n final)
            self._completar_resto_flujo_angular(cliente_data)
            
            logger.info("üéâ ¬°FLUJO DE FINANCIAMIENTO ANGULAR COMPLETADO EXITOSAMENTE!")
            
        except Exception as e:
            logger.error(f"‚ùå Error en configuraci√≥n de financiamiento Angular: {e}")
            raise

    def _completar_resto_flujo_angular(self, cliente_data):
        """Completar el resto del flujo (informaci√≥n personal, ubicaci√≥n, etc.)"""
        try:
            # ============= P√ÅGINA 4: INFORMACI√ìN PERSONAL =============
            logger.info("üìÑ P√ÅGINA 4: Informaci√≥n Personal")
            self._espera_humana(3, 5, "cargando p√°gina informaci√≥n personal")
            
            # N¬∞ de serie C.I ‚Üí input[id="N¬∞ de serie C.I."][name="N¬∞ de serie C.I."]
            logger.info("üÜî Llenando N¬∞ de serie C.I: 123456789")
            try:
                campo_ci = self.driver.find_element(By.CSS_SELECTOR, "input[id='N¬∞ de serie C.I.'][name='N¬∞ de serie C.I.']")
                self._click_humano(campo_ci)
                self._tipear_humano(campo_ci, "123456789")
                logger.info("‚úÖ N¬∞ de serie C.I llenado")
            except:
                logger.warning("‚ö†Ô∏è No se pudo llenar N¬∞ de serie C.I")
            
            # Estado Civil ‚Üí Seleccionar "Soltero/a" (CORREGIDO PARA EVITAR DUPLICADOS)
            logger.info("üíë Seleccionando Estado Civil: Soltero/a")
            try:
                select_civil = self.driver.find_element(By.CSS_SELECTOR, "select")
                select_obj = Select(select_civil)
                
                # M√âTODO 1: Intentar por valor espec√≠fico para evitar duplicados
                try:
                    select_obj.select_by_value("7: Object")  # Soltero/a real
                    logger.info("‚úÖ Estado Civil seleccionado por valor: Soltero/a")
                except:
                    # M√âTODO 2: Si falla, usar √≠ndice (√∫ltima opci√≥n de Soltero/a)
                    try:
                        opciones = select_obj.options
                        for i, opcion in enumerate(opciones):
                            if opcion.text == "Soltero/a" and not opcion.get_attribute("disabled"):
                                select_obj.select_by_index(i)
                                logger.info(f"‚úÖ Estado Civil seleccionado por √≠ndice {i}: Soltero/a")
                                break
                    except:
                        # M√âTODO 3: Fallback - seleccionar √∫ltimo √≠ndice disponible
                        select_obj.select_by_index(-1)
                        logger.info("‚úÖ Estado Civil seleccionado por fallback")
            except:
                logger.warning("‚ö†Ô∏è No se pudo seleccionar Estado Civil")
            
            try:
                btn_continuar = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[value='CONTINUAR']")))
                self._click_humano(btn_continuar)
                self._espera_humana(4, 6, "cargando ubicaci√≥n")
                logger.info("‚úÖ Continuado despu√©s de informaci√≥n personal")
            except:
                logger.error("‚ùå No se pudo continuar despu√©s de informaci√≥n personal")
                raise Exception("Error continuando informaci√≥n personal")
            
            # ============= P√ÅGINA 5: UBICACI√ìN =============
            logger.info("üìÑ P√ÅGINA 5: Ubicaci√≥n")
            self._espera_humana(3, 5, "cargando p√°gina ubicaci√≥n")
            
            # Regi√≥n ‚Üí Seleccionar "COQUIMBO"
            logger.info("üåé Seleccionando Regi√≥n: COQUIMBO")
            try:
                selects = self.driver.find_elements(By.CSS_SELECTOR, "select")
                if len(selects) >= 1:
                    select_region = Select(selects[0])
                    select_region.select_by_visible_text("COQUIMBO")
                    logger.info("‚úÖ Regi√≥n seleccionada: COQUIMBO")
                    self._espera_humana(3, 5, "cargando ciudades")
            except:
                logger.warning("‚ö†Ô∏è No se pudo seleccionar regi√≥n")
            
            # Ciudad ‚Üí Seleccionar seg√∫n disponibilidad (se carga din√°micamente)
            logger.info("üèôÔ∏è Intentando seleccionar Ciudad...")
            try:
                self._espera_humana(2, 3, "esperando carga de ciudades")
                selects = self.driver.find_elements(By.CSS_SELECTOR, "select")
                if len(selects) >= 2:
                    select_ciudad = Select(selects[1])
                    opciones = select_ciudad.options
                    if len(opciones) > 1:  # M√°s que solo "Seleccione"
                        select_ciudad.select_by_index(1)  # Seleccionar primera opci√≥n disponible
                        logger.info("‚úÖ Ciudad seleccionada")
                        self._espera_humana(3, 5, "cargando comunas")
            except:
                logger.warning("‚ö†Ô∏è No se pudo seleccionar ciudad")
            
            # Comuna ‚Üí Seleccionar seg√∫n disponibilidad (se carga din√°micamente)
            logger.info("üèòÔ∏è Intentando seleccionar Comuna...")
            try:
                self._espera_humana(2, 3, "esperando carga de comunas")
                selects = self.driver.find_elements(By.CSS_SELECTOR, "select")
                if len(selects) >= 3:
                    select_comuna = Select(selects[2])
                    opciones = select_comuna.options
                    if len(opciones) > 1:  # M√°s que solo "Seleccione"
                        select_comuna.select_by_index(1)  # Seleccionar primera opci√≥n disponible
                        logger.info("‚úÖ Comuna seleccionada")
            except:
                logger.warning("‚ö†Ô∏è No se pudo seleccionar comuna")
            
            # Direcci√≥n ‚Üí input[id="Direcci√≥n"][name="Direcci√≥n"]
            logger.info("üè† Llenando Direcci√≥n: Avenida")
            try:
                campo_direccion = self.driver.find_element(By.CSS_SELECTOR, "input[id='Direcci√≥n'][name='Direcci√≥n']")
                self._click_humano(campo_direccion)
                self._tipear_humano(campo_direccion, "Avenida")
                logger.info("‚úÖ Direcci√≥n llenada")
            except:
                logger.warning("‚ö†Ô∏è No se pudo llenar Direcci√≥n")
            
            try:
                btn_continuar = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[value='CONTINUAR']")))
                self._click_humano(btn_continuar)
                self._espera_humana(4, 6, "cargando informaci√≥n laboral")
                logger.info("‚úÖ Continuado despu√©s de ubicaci√≥n")
            except:
                logger.error("‚ùå No se pudo continuar despu√©s de ubicaci√≥n")
                raise Exception("Error continuando ubicaci√≥n")
            
            # ============= P√ÅGINA 6: INFORMACI√ìN LABORAL =============
            logger.info("üìÑ P√ÅGINA 6: Informaci√≥n Laboral")
            self._espera_humana(3, 5, "cargando p√°gina informaci√≥n laboral")
            
            # Modalidad de trabajo ‚Üí Seleccionar "Jubilado"
            logger.info("üíº Seleccionando Modalidad de trabajo: Jubilado")
            try:
                select_trabajo = self.driver.find_element(By.CSS_SELECTOR, "select")
                select_obj = Select(select_trabajo)
                select_obj.select_by_visible_text("Jubilado")
                logger.info("‚úÖ Modalidad de trabajo seleccionada: Jubilado")
            except:
                logger.warning("‚ö†Ô∏è No se pudo seleccionar modalidad de trabajo")
            
            # √öltima pensi√≥n l√≠quida ‚Üí input[id="import-simple"][name="import-simple"]
            logger.info("üí∞ Llenando √öltima pensi√≥n l√≠quida...")
            try:
                renta_liquida = int(cliente_data['RENTA LIQUIDA'])
                campo_pension = self.driver.find_element(By.CSS_SELECTOR, "input[id='import-simple'][name='import-simple']")
                self._click_humano(campo_pension)
                self._tipear_humano(campo_pension, str(renta_liquida))
                logger.info(f"‚úÖ √öltima pensi√≥n l√≠quida: {renta_liquida}")
            except:
                logger.warning("‚ö†Ô∏è No se pudo llenar √öltima pensi√≥n l√≠quida")
            
            try:
                btn_continuar = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[value='CONTINUAR']")))
                self._click_humano(btn_continuar)
                self._espera_humana(4, 6, "cargando p√°gina final")
                logger.info("‚úÖ Continuado despu√©s de informaci√≥n laboral")
            except:
                logger.error("‚ùå No se pudo continuar despu√©s de informaci√≥n laboral")
                raise Exception("Error continuando informaci√≥n laboral")
            
            # ============= P√ÅGINA 7: EVALUAR SOLICITUD =============
            logger.info("üìÑ P√ÅGINA 7: Evaluar Solicitud")
            self._espera_humana(3, 5, "cargando p√°gina final")
            
            # Click en EVALUAR SOLICITUD - button[value="EVALUAR SOLICITUD"]
            logger.info("üì§ Haciendo click en EVALUAR SOLICITUD...")
            try:
                btn_evaluar = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[value='EVALUAR SOLICITUD']")))
                self._click_humano(btn_evaluar)
                self._espera_humana(6, 10, "procesando evaluaci√≥n final")
                logger.info("‚úÖ Solicitud enviada para evaluaci√≥n")
            except:
                logger.warning("‚ö†Ô∏è No se encontr√≥ bot√≥n EVALUAR SOLICITUD, continuando...")
            
            # ============= CAPTURAR RESULTADO FINAL =============
            logger.info("üì∏ Capturando resultado final...")
            self._espera_humana(5, 8, "cargando resultado final")
            
        except Exception as e:
            logger.error(f"‚ùå Error completando resto del flujo Angular: {e}")
            raise

    def procesar_todos_los_clientes(self):
        """Procesar todos los clientes CON SELECTORES ANGULAR CORREGIDOS"""
        logger.info("üöÄ INICIANDO PROCESAMIENTO CON SELECTORES ANGULAR...")
        
        todos_los_clientes = self.leer_todos_los_clientes()
        
        if not todos_los_clientes:
            logger.info("‚ÑπÔ∏è No hay clientes para procesar en ninguna planilla")
            return True
        
        total_clientes = len(todos_los_clientes)
        logger.info(f"üìä Total clientes a procesar: {total_clientes}")
        
        for idx, cliente in enumerate(todos_los_clientes, 1):
            logger.info(f"\n{'='*20} CLIENTE {idx}/{total_clientes} {'='*20}")
            logger.info(f"üë• Agente: {cliente['agente']}")
            logger.info(f"üë§ Cliente: {cliente['Nombre Cliente']} - {cliente['RUT']}")
            
            try:
                if idx > 1:
                    logger.info("ü§î Pausa entre clientes...")
                    self._espera_humana(8, 15, "descanso entre clientes")
                    
                    try:
                        logger.info("üîÑ Regresando al dashboard...")
                        self.driver.get("https://prescriptores.salvum.cl/credit-request")
                        self._espera_humana(3, 6, "cargando p√°gina principal")
                    except Exception as e:
                        logger.warning(f"Error regresando al dashboard: {e}")
                        self._espera_humana(3, 5, "recuperaci√≥n dashboard")
                
                logger.info(f"üë§ Procesando cliente {idx} con selectores Angular...")
                if self.procesar_cliente_individual(cliente):
                    logger.info(f"‚úÖ Cliente {idx} completado exitosamente")
                    self._espera_humana(2, 4, "satisfacci√≥n por cliente completado")
                else:
                    logger.error(f"‚ùå Cliente {idx} fall√≥")
                    self._espera_humana(3, 6, "procesando fallo")
                
            except Exception as e:
                logger.error(f"‚ùå Error procesando cliente {idx}: {e}")
                self._espera_humana(5, 8, "recuper√°ndose de error")
                continue
        
        logger.info("üéâ ¬°PROCESAMIENTO ANGULAR COMPLETADO!")
        self._espera_humana(3, 6, "finalizaci√≥n exitosa")
        
        return True
    
    def generar_reporte_final(self):
        """Generar reporte final por agente"""
        logger.info("üìä Generando reporte final...")
        
        total_procesados = len(self.clientes_procesados)
        total_fallidos = len(self.clientes_fallidos)
        total_clientes = total_procesados + total_fallidos
        
        procesados_por_agente = {}
        fallidos_por_agente = {}
        
        for cliente in self.clientes_procesados:
            agente = cliente['agente']
            if agente not in procesados_por_agente:
                procesados_por_agente[agente] = []
            procesados_por_agente[agente].append(cliente)
        
        for cliente in self.clientes_fallidos:
            agente = cliente['agente']
            if agente not in fallidos_por_agente:
                fallidos_por_agente[agente] = []
            fallidos_por_agente[agente].append(cliente)
        
        reporte = {
            'timestamp': datetime.now().isoformat(),
            'version': 'SELECTORES_ANGULAR_CORREGIDOS',
            'configuracion_chrome': 'SIN_PROXY_GARANTIZADO',
            'selectores': 'BASADOS_EN_COMPONENTES_ANGULAR_REALES',
            'estados_validos_usados': ESTADOS_VALIDOS_PROCESAR,
            'total_agentes': len(self.agentes_config),
            'total_clientes': total_clientes,
            'exitosos': total_procesados,
            'fallidos': total_fallidos,
            'tasa_exito': f"{(total_procesados/total_clientes*100):.1f}%" if total_clientes > 0 else "0%",
            'por_agente': {
                'exitosos': procesados_por_agente,
                'fallidos': fallidos_por_agente
            },
            'detalles_completos': {
                'exitosos': self.clientes_procesados,
                'fallidos': self.clientes_fallidos
            }
        }
        
        with open('reporte_salvum_angular_corregido.json', 'w', encoding='utf-8') as f:
            json.dump(reporte, f, indent=2, ensure_ascii=False)
        
        logger.info("="*70)
        logger.info("üìä REPORTE FINAL - SELECTORES ANGULAR CORREGIDOS")
        logger.info("="*70)
        logger.info(f"üîß Configuraci√≥n: Chrome sin proxy + Selectores Angular reales")
        logger.info(f"üéØ Estados v√°lidos: {ESTADOS_VALIDOS_PROCESAR}")
        logger.info(f"üë• Total agentes: {len(self.agentes_config)}")
        logger.info(f"‚úÖ Clientes exitosos: {total_procesados}")
        logger.info(f"‚ùå Clientes fallidos: {total_fallidos}")
        logger.info(f"üìà Tasa de √©xito: {reporte['tasa_exito']}")
        
        logger.info("\nüìã RESULTADOS POR AGENTE:")
        for agente in self.agentes_config:
            nombre = agente['nombre']
            exitosos = len(procesados_por_agente.get(nombre, []))
            fallidos = len(fallidos_por_agente.get(nombre, []))
            total_agente = exitosos + fallidos
            
            if total_agente > 0:
                tasa_agente = (exitosos/total_agente*100)
                logger.info(f"  üë• {nombre}: {exitosos}‚úÖ {fallidos}‚ùå ({tasa_agente:.1f}%)")
                
                if exitosos > 0:
                    for cliente in procesados_por_agente[nombre]:
                        logger.info(f"    ‚úÖ {cliente['cliente']} ({cliente['rut']})")
                
                if fallidos > 0:
                    for cliente in fallidos_por_agente[nombre]:
                        logger.info(f"    ‚ùå {cliente['cliente']} ({cliente['rut']}): {cliente['error']}")
            else:
                logger.info(f"  üë• {nombre}: Sin clientes para procesar")
        
        logger.info("="*70)
        
        return reporte
    
    def ejecutar_automatizacion_completa(self):
        """VERSI√ìN CORREGIDA: Automatizaci√≥n con selectores Angular"""
        logger.info("üöÄ INICIANDO AUTOMATIZACI√ìN CON SELECTORES ANGULAR CORREGIDOS")
        logger.info("="*70)
        logger.info(f"üîß Chrome: Sin proxy garantizado")
        logger.info(f"üéØ Selectores: Basados en componentes Angular reales")
        logger.info(f"üéØ Estados v√°lidos: {ESTADOS_VALIDOS_PROCESAR}")
        logger.info("="*70)
        
        try:
            # Verificar VPS
            vps_ok, ip_data = self.verificar_conexion_vps()
            if vps_ok:
                logger.info("‚úÖ VPS Chile disponible para verificaciones")
            else:
                logger.warning("‚ö†Ô∏è VPS no disponible - Continuando sin verificaciones VPS")
            
            # Cargar configuraci√≥n
            if not self.cargar_configuracion_agentes():
                return False
            
            if not self.configurar_google_sheets():
                return False
            
            # Leer clientes
            todos_los_clientes = self.leer_todos_los_clientes()
            if not todos_los_clientes:
                logger.info("‚ÑπÔ∏è No hay clientes para procesar")
                return True
            
            # Configurar navegador
            logger.info("üîß Configurando navegador...")
            if not self.configurar_navegador():
                logger.error("‚ùå Error configurando navegador")
                return False
            
            # Realizar login
            if not self.realizar_login():
                logger.error("‚ùå Login fall√≥")
                return False
            
            # Procesar clientes
            self.procesar_todos_los_clientes()
            
            # Generar reporte
            self.generar_reporte_final()
            
            logger.info("üéâ ¬°AUTOMATIZACI√ìN ANGULAR CORREGIDA COMPLETADA!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en automatizaci√≥n: {e}")
            import traceback
            logger.error(f"üìã Traceback completo: {traceback.format_exc()}")
            return False
            
        finally:
            if self.driver:
                try:
                    self.driver.quit()
                    logger.info("üîí Navegador cerrado correctamente")
                except:
                    pass

def main():
    """Funci√≥n principal"""
    automator = SalvumAutomacionCorregida()
    
    print("üá®üá± AUTOMATIZACI√ìN SALVUM - SELECTORES ANGULAR CORREGIDOS")
    print("üîß Basado en componentes Angular reales")
    print(f"üéØ Estados v√°lidos: {ESTADOS_VALIDOS_PROCESAR}")
    print("-"*70)
    
    success = automator.ejecutar_automatizacion_completa()
    
    if success:
        print("\n‚úÖ ¬°AUTOMATIZACI√ìN EXITOSA!")
        print("üìã Ver reporte_salvum_angular_corregido.json para detalles")
        print("üìä Estados actualizados en todas las planillas")
        print("üîß Versi√≥n con selectores Angular corregidos")
    else:
        print("\n‚ùå Error en automatizaci√≥n")

if __name__ == "__main__":
    main()
